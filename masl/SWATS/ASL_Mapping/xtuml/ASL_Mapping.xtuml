-- root-types-contained: Package_c
-- BP 7.1 content: StreamData syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000029",'Object_IF',2,'objIF',' This object verifies the ''IF'' statement.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000034",'Object_FOR',3,'objFOR',' This object verifies the FOR statement.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000003f",'Object_LOOP',4,'objLOOP',' This object verifies the ''LOOP'' statement.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000004a",'Object_NESTED',5,'objNESTED',' This object verifies various nested statements.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000055",'Object_SWITCH',6,'objSWITCH',' This object verifies the ''SWITCH'' statement.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000060",'Object_LOGIC',7,'objLOGIC',' This object verifies arithemetical and logical operations.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000006b",'Nested_IF',8,'NstIF',' This object verifies nested ''IF'' statements and multiple
 conditions that the statement must verify.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000076",'Nested_FOR',9,'NstFOR',' This object verifies nested ''FOR'' statements.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000081",'Nested_LOOP',10,'NstLOOP',' This object verifies nested ''LOOP'' statements.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-00000000008c",'Report_Data',11,'RD','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-000000000097",'BIG_Object',12,'objBIG',' This object shall contain 80+  attributes, just to see what
 happens.
 This as a result of DEFECT 718.
',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000a2",'Processor',13,'PROC','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000ad",'Default_Vals',14,'DV','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000b8",'ObjectA',15,'objA','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000c3",'ObjectB',16,'objB','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000ce",'Left',17,'objLeft','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000d9",'Right',18,'objRight','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000e4",'LeftRight',19,'objLR','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_OBJ VALUES ( "00000000-0000-0000-0000-0000000000ef",'Another_Right',20,'objAR','',"00000000-0000-0000-0000-000000000000" );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000214","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','ReferenceIF',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000021c","00000000-0000-0000-0000-000000000029","00000000-0000-0000-0000-000000000214",'',' This attribute is manipulated to indicated that the required
 operation was successful.
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000225","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','ReferenceFOR',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000022d","00000000-0000-0000-0000-000000000034","00000000-0000-0000-0000-000000000225",'',' This attribute is manipulated to indicated that the required
 operation was successful.
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000236","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','ReferenceLOOP',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000023e","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-000000000236",'',' This attribute is manipulated to indicated that the required
 operation was successful.
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000024b","00000000-0000-0000-0000-00000000003f","00000000-0000-0000-0000-00000000023e",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000263","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','ReferenceNESTED',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000026b","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000263",'',' This attribute is manipulated to inducate that the required
 operation was successful.
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000271","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-00000000026b",'',' This attribute is manipulated to indicate that the required
 operation was successful.
','','ResultB',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000027d","00000000-0000-0000-0000-00000000004a","00000000-0000-0000-0000-000000000271",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002a1","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','ReferenceSWITCH',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002a9","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000002a1",'',' This attribute is manipulated to indicate that the required
 operation was successful.
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002af","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000002a9",'',' Determines which case statement to execute.
','','IntegerAttr',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002bb","00000000-0000-0000-0000-000000000055","00000000-0000-0000-0000-0000000002af",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002d9","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-000000000000",'',' An integer
','','IntegerAttr',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002df","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-0000000002d9",'','','','TextAttr',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002e5","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-0000000002df",'','','','EnumerationAttr',0,"00000000-0000-0000-0000-000000000102",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002eb","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-0000000002e5",'','','','BooleanAttr',0,"ba5eda7a-def5-0000-0000-000000000001",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002f1","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-0000000002eb",'',' This attribute is manipulated to indicate that the required
 operation was successful.
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002f7","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-0000000002f1",'',' Preferred identifier.
','','ReferenceLOGIC',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000002ff","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-0000000002f7",'','','','RealAttr',0,"ba5eda7a-def5-0000-0000-000000000003",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000030f","00000000-0000-0000-0000-000000000060","00000000-0000-0000-0000-0000000002ff",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000339","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','ReferenceNstIF',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000341","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-000000000339",'',' This attribute if manipulated to indicated that the required
 operation was successful.
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000034e","00000000-0000-0000-0000-00000000006b","00000000-0000-0000-0000-000000000341",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000036c","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','ReferenceNstFOR',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000374","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-00000000036c",'',' This attribute is manipulated to indicate that the required
 operation was successful.
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000380","00000000-0000-0000-0000-000000000076","00000000-0000-0000-0000-000000000374",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000398","00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-000000000000",'',' Preferred identifier.
','','ReferenceNstLOOP',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003a0","00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-000000000398",'',' This attribute is manipulated to indicate that th required
 operation was successful.
','','ResultA',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003ad","00000000-0000-0000-0000-000000000081","00000000-0000-0000-0000-0000000003a0",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003c5","00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-000000000000",'','','','Report_Data_Unique_id',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003cd","00000000-0000-0000-0000-00000000008c","00000000-0000-0000-0000-0000000003c5",'','','','Reported_Domain_Number',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003d3","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000000",'','','','One',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003d9","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000003d3",'','','','Two',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003df","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000003d9",'','','','Three',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003e5","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000003df",'','','','Four',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003eb","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000003e5",'','','','Five',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003f1","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000003eb",'','','','Six',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003f7","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000003f1",'','','','Seven',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000003fd","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000003f7",'','','','Eight',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000403","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000003fd",'','','','Nine',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000409","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000403",'','','','Ten',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000040f","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000409",'','','','Eleven',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000415","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000040f",'','','','Twelve',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000041b","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000415",'','','','Thirteen',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000421","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000041b",'','','','Fourteen',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000427","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000421",'','','','Fifteen',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000042d","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000427",'','','','Sixteen',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000433","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000042d",'','','','Eighteen',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000439","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000433",'','','','Nineteen',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000043f","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000439",'','','','Twenty',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000445","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000043f",'','','','Twentyone',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000044b","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000445",'','','','Twentytwo',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000451","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000044b",'','','','Twentythree',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000457","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000451",'','','','Twentyfour',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000045d","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000457",'','','','Twentyfive',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000463","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000045d",'','','','Twentysix',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000469","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000463",'','','','Twentyseven',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000046f","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000469",'','','','Twentyeight',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000475","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000046f",'','','','Twentynine',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000047b","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000475",'','','','Thirty',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000481","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000047b",'','','','Thirtyone',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000487","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000481",'','','','Thirtytwo',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000048d","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000487",'','','','Thirtythree',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000493","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000048d",'','','','Thirtyfour',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000499","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000493",'','','','Thirtyfive',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000049f","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000499",'','','','Thirtysix',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004a5","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000049f",'','','','Thirtyseven',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004ab","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004a5",'','','','Thirtyeight',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004b1","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004ab",'','','','Thirtynine',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004b7","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004b1",'','','','Forty',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004bd","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004b7",'','','','Fortyone',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004c3","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004bd",'','','','Fortytwo',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004c9","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004c3",'','','','Fortythree',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004cf","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004c9",'','','','Fortyfour',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004d5","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004cf",'','','','Fortyfive',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004db","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004d5",'','','','Fortysix',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004e1","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004db",'','','','Fortyseven',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004e7","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004e1",'','','','Fortyeight',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004ed","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004e7",'','','','Fortynine',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004f3","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004ed",'','','','Fifty',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004f9","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004f3",'','','','Fiftyone',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000004ff","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004f9",'','','','Fiftytwo',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000505","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000004ff",'','','','Fiftythree',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000050b","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000505",'','','','Fiftyfour',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000511","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000050b",'','','','Fiftyfive',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000517","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000511",'','','','Fiftysix',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000051d","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000517",'','','','Fiftyseven',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000523","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000051d",'','','','Fiftyeight',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000529","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000523",'','','','Fiftynine',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000052f","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000529",'','','','Sixty',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000535","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000052f",'','','','Sixtyone',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000053b","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000535",'','','','Sixtytwo',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000541","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000053b",'','','','Sixtythree',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000547","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000541",'','','','Sixtyfour',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000054d","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000547",'','','','Sixtyfive',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000553","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000054d",'','','','Sixtysix',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000559","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000553",'','','','Sixtyseven',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000055f","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000559",'','','','Sixtyeight',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000565","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000055f",'','','','Sixtynine',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000056b","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000565",'','','','Seventy',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000571","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000056b",'','','','Seventyone',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000577","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000571",'','','','Seventytwo',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000057d","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000577",'','','','Seventythree',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000583","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000057d",'','','','Seventyfour',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000589","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000583",'','','','Seventyfive',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000058f","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000589",'','','','Seventysix',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000595","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000058f",'','','','Seventyseven',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000059b","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-000000000595",'','','','Seventyeight',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000005a1","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-00000000059b",'','','','Seventynine',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000005a7","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000005a1",'','','','Eighty',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000005ad","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000005a7",'','','','Eightyone',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000005b3","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000005ad",'','','','Eightytwo',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000005b9","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000005b3",'','','','Eightythree',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000005bf","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000005b9",'','','','Eightyfour',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000005cc","00000000-0000-0000-0000-000000000097","00000000-0000-0000-0000-0000000005bf",'','','','current_state',0,"ba5eda7a-def5-0000-0000-000000000006",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000006bf","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-000000000000",'','','','Processor_Id',0,"00000000-0000-0000-0000-0000000000fa",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000006c7","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-0000000006bf",'','','','Background_Processing_Timer_Id',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000006cd","00000000-0000-0000-0000-0000000000a2","00000000-0000-0000-0000-0000000006c7",'','','','Communications_Enabled',0,"ba5eda7a-def5-0000-0000-000000000001",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000006d7","00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-000000000000",'','','','The_Integer',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000006dd","00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-0000000006d7",'','','','The_Real',0,"ba5eda7a-def5-0000-0000-000000000003",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000006e3","00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-0000000006dd",'','','','The_Text',0,"ba5eda7a-def5-0000-0000-000000000004",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000006e9","00000000-0000-0000-0000-0000000000ad","00000000-0000-0000-0000-0000000006e3",'','','','The_Boolean',0,"ba5eda7a-def5-0000-0000-000000000001",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000006f2","00000000-0000-0000-0000-0000000000b8","00000000-0000-0000-0000-000000000000",'','','','The_Int1',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000006f8","00000000-0000-0000-0000-0000000000b8","00000000-0000-0000-0000-0000000006f2",'','','','The_Int2',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-0000000006fe","00000000-0000-0000-0000-0000000000c3","00000000-0000-0000-0000-000000000000",'','','','The_IntB1',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000704","00000000-0000-0000-0000-0000000000c3","00000000-0000-0000-0000-0000000006fe",'','','','The_IntB2',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000070a","00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-000000000000",'','','','idL',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000712","00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-00000000070a",'','','','attrL',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000718","00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-000000000000",'','','','idR',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000734","00000000-0000-0000-0000-0000000000ef","00000000-0000-0000-0000-000000000000",'','','','idAR',0,"ba5eda7a-def5-0000-0000-000000000002",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000082c","00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-000000000852",'','','','idAR',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-00000000083f","00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-000000000000",'','','','idL',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ATTR VALUES ( "00000000-0000-0000-0000-000000000852","00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-00000000083f",'','','','idR',0,"ba5eda7a-def5-0000-0000-000000000007",'','' );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000029" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000034" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000055" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000060" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000076" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000081" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000081" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000081" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-000000000097" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-000000000097" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-000000000097" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000b8" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000b8" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000b8" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000c3" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000c3" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000c3" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000ce" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000ce" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000ce" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000d9" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000d9" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000d9" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000e4" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000e4" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000e4" );
INSERT INTO O_ID VALUES ( 0,"00000000-0000-0000-0000-0000000000ef" );
INSERT INTO O_ID VALUES ( 1,"00000000-0000-0000-0000-0000000000ef" );
INSERT INTO O_ID VALUES ( 2,"00000000-0000-0000-0000-0000000000ef" );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000214","00000000-0000-0000-0000-000000000029",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000225","00000000-0000-0000-0000-000000000034",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000236","00000000-0000-0000-0000-00000000003f",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000263","00000000-0000-0000-0000-00000000004a",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000002a1","00000000-0000-0000-0000-000000000055",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000002f7","00000000-0000-0000-0000-000000000060",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000339","00000000-0000-0000-0000-00000000006b",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000036c","00000000-0000-0000-0000-000000000076",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000398","00000000-0000-0000-0000-000000000081",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000003c5","00000000-0000-0000-0000-00000000008c",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-0000000006bf","00000000-0000-0000-0000-0000000000a2",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000070a","00000000-0000-0000-0000-0000000000ce",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000718","00000000-0000-0000-0000-0000000000d9",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000734","00000000-0000-0000-0000-0000000000ef",0,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-00000000083f","00000000-0000-0000-0000-0000000000e4",1,'' );
INSERT INTO O_OIDA VALUES ( "00000000-0000-0000-0000-000000000852","00000000-0000-0000-0000-0000000000e4",0,'' );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000214","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000021c","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000225","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000022d","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000236","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000023e","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000024b","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000263","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000026b","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000271","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000027d","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002a1","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002a9","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002af","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002bb","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002d9","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002df","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002e5","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002eb","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002f1","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002f7","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000002ff","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000030f","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000339","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000341","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000034e","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000036c","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000374","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000380","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000398","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003a0","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003ad","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003c5","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003cd","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003d3","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003d9","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003df","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003e5","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003eb","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003f1","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003f7","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000003fd","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000403","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000409","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000040f","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000415","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000041b","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000421","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000427","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000042d","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000433","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000439","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000043f","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000445","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000044b","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000451","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000457","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000045d","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000463","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000469","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000046f","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000475","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000047b","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000481","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000487","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000048d","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000493","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000499","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000049f","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004a5","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004ab","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004b1","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004b7","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004bd","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004c3","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004c9","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004cf","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004d5","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004db","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004e1","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004e7","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004ed","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004f3","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004f9","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000004ff","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000505","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000050b","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000511","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000517","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000051d","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000523","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000529","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000052f","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000535","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000053b","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000541","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000547","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000054d","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000553","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000559","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000055f","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000565","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000056b","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000571","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000577","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000057d","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000583","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000589","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000058f","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000595","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000059b","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000005a1","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000005a7","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000005ad","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000005b3","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000005b9","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000005bf","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000005cc","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000006bf","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000006c7","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000006cd","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000006d7","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000006dd","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000006e3","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000006e9","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000006f2","00000000-0000-0000-0000-0000000000b8" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000006f8","00000000-0000-0000-0000-0000000000b8" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-0000000006fe","00000000-0000-0000-0000-0000000000c3" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000704","00000000-0000-0000-0000-0000000000c3" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-00000000070a","00000000-0000-0000-0000-0000000000ce" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000712","00000000-0000-0000-0000-0000000000ce" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000718","00000000-0000-0000-0000-0000000000d9" );
INSERT INTO O_BATTR VALUES ( "00000000-0000-0000-0000-000000000734","00000000-0000-0000-0000-0000000000ef" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000214","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000021c","00000000-0000-0000-0000-000000000029" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000225","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000022d","00000000-0000-0000-0000-000000000034" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000236","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000023e","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000024b","00000000-0000-0000-0000-00000000003f" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000263","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000026b","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000271","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000027d","00000000-0000-0000-0000-00000000004a" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002a1","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002a9","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002af","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002bb","00000000-0000-0000-0000-000000000055" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002d9","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002df","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002e5","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002eb","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002f1","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002f7","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000002ff","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000030f","00000000-0000-0000-0000-000000000060" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000339","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000341","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000034e","00000000-0000-0000-0000-00000000006b" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000036c","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000374","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000380","00000000-0000-0000-0000-000000000076" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000398","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003a0","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003ad","00000000-0000-0000-0000-000000000081" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003c5","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003cd","00000000-0000-0000-0000-00000000008c" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003d3","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003d9","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003df","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003e5","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003eb","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003f1","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003f7","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000003fd","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000403","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000409","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000040f","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000415","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000041b","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000421","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000427","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000042d","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000433","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000439","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000043f","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000445","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000044b","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000451","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000457","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000045d","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000463","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000469","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000046f","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000475","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000047b","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000481","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000487","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000048d","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000493","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000499","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000049f","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004a5","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004ab","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004b1","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004b7","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004bd","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004c3","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004c9","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004cf","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004d5","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004db","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004e1","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004e7","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004ed","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004f3","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004f9","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000004ff","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000505","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000050b","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000511","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000517","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000051d","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000523","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000529","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000052f","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000535","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000053b","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000541","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000547","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000054d","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000553","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000559","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000055f","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000565","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000056b","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000571","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000577","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000057d","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000583","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000589","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000058f","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000595","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000059b","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000005a1","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000005a7","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000005ad","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000005b3","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000005b9","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000005bf","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000005cc","00000000-0000-0000-0000-000000000097" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000006bf","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000006c7","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000006cd","00000000-0000-0000-0000-0000000000a2" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000006d7","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000006dd","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000006e3","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000006e9","00000000-0000-0000-0000-0000000000ad" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000006f2","00000000-0000-0000-0000-0000000000b8" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000006f8","00000000-0000-0000-0000-0000000000b8" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-0000000006fe","00000000-0000-0000-0000-0000000000c3" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000704","00000000-0000-0000-0000-0000000000c3" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-00000000070a","00000000-0000-0000-0000-0000000000ce" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000712","00000000-0000-0000-0000-0000000000ce" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000718","00000000-0000-0000-0000-0000000000d9" );
INSERT INTO O_NBATTR VALUES ( "00000000-0000-0000-0000-000000000734","00000000-0000-0000-0000-0000000000ef" );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-00000000082c","00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-000000000734","00000000-0000-0000-0000-0000000000ef",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-00000000083f","00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-00000000070a","00000000-0000-0000-0000-0000000000ce",0,'' );
INSERT INTO O_RATTR VALUES ( "00000000-0000-0000-0000-000000000852","00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-000000000718","00000000-0000-0000-0000-0000000000d9",0,'' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-0000000000ef",0,"00000000-0000-0000-0000-000000000734","00000000-0000-0000-0000-000000000200","00000000-0000-0000-0000-000000000204","00000000-0000-0000-0000-00000000020d","00000000-0000-0000-0000-00000000082c","00000000-0000-0000-0000-00000000083e","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-0000000000ce",0,"00000000-0000-0000-0000-00000000070a","00000000-0000-0000-0000-0000000001db","00000000-0000-0000-0000-0000000001fb","00000000-0000-0000-0000-0000000001df","00000000-0000-0000-0000-00000000083f","00000000-0000-0000-0000-000000000851","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_REF VALUES ( "00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-0000000000d9",0,"00000000-0000-0000-0000-000000000718","00000000-0000-0000-0000-0000000001db","00000000-0000-0000-0000-0000000001fb","00000000-0000-0000-0000-0000000001e8","00000000-0000-0000-0000-000000000852","00000000-0000-0000-0000-000000000864","00000000-0000-0000-0000-000000000000",0,'','','','' );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000734","00000000-0000-0000-0000-0000000000ef",0,"00000000-0000-0000-0000-000000000200","00000000-0000-0000-0000-00000000020d" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-00000000070a","00000000-0000-0000-0000-0000000000ce",0,"00000000-0000-0000-0000-0000000001db","00000000-0000-0000-0000-0000000001df" );
INSERT INTO O_RTIDA VALUES ( "00000000-0000-0000-0000-000000000718","00000000-0000-0000-0000-0000000000d9",0,"00000000-0000-0000-0000-0000000001db","00000000-0000-0000-0000-0000000001e8" );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000222","00000000-0000-0000-0000-000000000029",'do_if_test',' Object based function for performing ''if'' tests. Tests
 simple logical expressions on Integer local variables and
 requires instance creation, attribute assignment.
',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# IF statement
# The ASL <if> statement shall be supported
# 1103-0000-01-0421
#
# The ASL <if ... else> statement shall be supported
# 1101-0000-01-0422
#------------------------------------------------------------------------#

# create an instance to remember to test results
newIF = create unique Object_IF with ResultA = 0 

Test = Test_Start

#------------------------------------------------------------------------#
# Test 1 - Enter IF THEN stage of condition with an integer value
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping", "objIF", "IF test enter THEN stage"]
   [] = RPT5:Test_Text [Test, "The_First_Comment"]
   [] = RPT5:Test_Text [Test, "The_Second_Comment"]
   # Initialise temporary variable
   Temp = 1

   # Perform the test
   if Temp = 1 then
      newIF.ResultA = 10
      [] = RPT2:Test_Passed["objIF", Test, newIF.ResultA]
   else
      [] = RPT3:Test_Failed["objIF", Test, -10]
   endif

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - Enter ELSE stage of condition
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping", "objIF", "IF test enter ELSE stage"]

   # Initialise temporary variable
   Temp = 1

   # Perform the test
   if Temp = 2 then
      [] = RPT3:Test_Failed["objIF", Test, -10]
   else
      newIF.ResultA = 20

      [] = RPT2:Test_Passed["objIF", Test, newIF.ResultA]
   endif

   Test = Test + 1

# End Test 2

#------------------------------------------------------------------------#
# Test 3 - IF-THEN, enter THEN part
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0421", "ASL Mapping", "objIF", "IF test enter THEN part"]

   Temp = 2

   # Check temporary variables values
   if Temp != 2 then
      [] = RPT3:Test_Failed["objIF", Test, -10]
   endif

   # Perform the test
   if Temp = 2 then
      newIF.ResultA = 30
      [] = RPT2:Test_Passed["objIF", Test, newIF.ResultA]
   endif

   Test = Test + 1

# End Test 3

#------------------------------------------------------------------------#
# Test 4 - IF-THEN statement where condition is unfulfilled
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0421", "ASL Mapping","objIF", "If test condition unfulfilled"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0422"]

   Temp = 2

   # Perform the test
   if Temp = 3 then
      Temp = 4              
      # This statement should not be entered
   endif

   # Check the results
   if Temp  = 4 then
      [] = RPT3:Test_Failed["objIF", Test, -10]
   else
      newIF.ResultA = 40
      [] = RPT2:Test_Passed["objIF", Test, newIF.ResultA]
   endif

   Test = Test + 1

# End Test 4

#------------------------------------------------------------------------#
# Test 5 - Boolean test should enter IF THEN condition
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping","objIF", "Boolean tests TRUE 1"]

   A = TRUE
   B = TRUE

   if A = B then
      newIF.ResultA = 50
      [] = RPT2:Test_Passed["Boolean A = B TRUE", Test, newIF.ResultA]
   else
      [] = RPT3:Test_Failed["Boolean A = B TRUE", Test, -10]
   endif

   Test = Test + 1

# End Test 5

#------------------------------------------------------------------------#
# Test 6 - Boolean test should enter IF THEN condition
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping","objIF", "Boolean tests TRUE 2"]

   A = TRUE

   if A then
      newIF.ResultA = 60
      [] = RPT2:Test_Passed["Boolean A TRUE", Test, newIF.ResultA]
   else
      [] = RPT3:Test_Failed["Boolean A TRUE", Test, -10]
   endif

   Test = Test + 1

# End Test 6

#------------------------------------------------------------------------#
# Test 7 - Boolen test should enter IF THEN condition
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping","objIF", "Boolean tests FALSE 1"]

   A = TRUE
   B = FALSE

   if A != B then
      newIF.ResultA = 70
      [] = RPT2:Test_Passed["Boolean A != B FALSE", Test, newIF.ResultA]
   else
      [] = RPT3:Test_Failed["Boolean A != B FALSE", Test, -10]
   endif

   Test = Test + 1

# End Test 7

#------------------------------------------------------------------------#
# Test 8 - Should enter IF THEN Condition
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping","objIF", "Boolean tests FALSE 2"]

   A = TRUE
   B = FALSE

   if !B then
      newIF.ResultA = 80
      [] = RPT2:Test_Passed["Boolean !B FALSE", Test, newIF.ResultA]
   else
      [] = RPT3:Test_Failed["Boolean !B FALSE", Test, -10]
   endif

   Test = Test + 1

# Test 8

#------------------------------------------------------------------------#
# Test 9 - Boolean test should enter ELSE part of condition
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping","objIF", "Boolean tests FALSE 3"]

   A = TRUE
   B = FALSE

   if !A then
      [] = RPT3:Test_Failed["Boolean !A TRUE", Test, -10]
   else
      newIF.ResultA = 90
      [] = RPT2:Test_Passed["Boolean !A TRUE", Test, newIF.ResultA]
   endif

   Test = Test + 1

# End Test 9

#------------------------------------------------------------------------#

Final_Test = Test',3,'',"00000000-0000-0000-0000-000000000000",2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000233","00000000-0000-0000-0000-000000000034",'do_for_test',' Function to do the FOR tests.
',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
#
# FOR Tests
#
# The ASL <for> loop statement shall be supported
# 1103-0000-01-0431
#
# Break from and ASL <for> loop statement shall be supported
# 1103-0000-01-0432
#
#------------------------------------------------------------------------#

#------------------------------------------------------------------------#
#Create several instances of the Object_FOR
#------------------------------------------------------------------------#

   Count = 1
   Has_Failed = FALSE

   loop
      newFOR = create unique Object_FOR with ResultA = 0
      Count = Count + 1
      breakif Count > 5
   endloop

   Test = Test_Start

#------------------------------------------------------------------------#
# Test 1 - FOR instance count
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objFOR", "FOR instance count"]

   Count = 0

   {all_instances_of_FOR} = find-all Object_FOR

   for each_instance in {all_instances_of_FOR} do
      each_instance.ResultA = 10
      Count = Count + 1
   endfor

   # Verify that the total number of instance affect was FIVE.
   if  Count != 5 then
      [] = RPT3:Test_Failed["objFOR", Test, Count]
      Has_Failed = TRUE
   else
      [] = RPT2:Test_Passed["objFOR", Test, Count]
   endif

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - FOR with BREAKIF
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objFOR", "FOR with BREAKIF"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0432"]

   Count = 0

   for each_instance in {all_instances_of_FOR} do
      each_instance.ResultA = 20
      Count = Count + 1
      breakif Count = 2
   endfor

   # Verify that the total number of instance affect was TWO.
   if  Count != 2 then
      [] = RPT3:Test_Failed["objFOR", Test, Count]
      Has_Failed = TRUE
   else
      [] = RPT2:Test_Passed["objFOR", Test, Count]
   endif

   Test = Test + 1

# End Test 2

#------------------------------------------------------------------------#
# Test 3 - FOR with BREAK, break after affecting one instance
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objFOR", "Break after once instance"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0432"]

   Count = 0

   for each_instance in {all_instances_of_FOR} do
      each_instance.ResultA = 30
      Count = Count + 1
      break
   endfor

   # Verify that the total number of instance affect was ONE.
   if  Count != 1 then
      [] = RPT3:Test_Failed["objFOR", Test, Count]
      Has_Failed = TRUE
   else
      [] = RPT2:Test_Passed["objFOR", Test, Count]
   endif

   Test = Test + 1

# End Test 3

#------------------------------------------------------------------------#
# Test 4 - FOR with BREAK, break before affecting any instance
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objFOR", "FOR test break before affecting any instance"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0432"]

   Count = 0

   for each_instance in {all_instances_of_FOR} do
      break
      each_instance.ResultA = 40
      Count = Count + 1
   endfor

   # Verify that the total number of instance affect was ZERO.
   if  Count != 0 then
      [] = RPT3:Test_Failed["objFOR", Test, Count]
      Has_Failed = TRUE
   else
      [] = RPT2:Test_Passed["objFOR", Test, Count]
   endif

   Test = Test + 1

# End Test 4

#------------------------------------------------------------------------#
# Verify FOR with BREAK, break before affecting any instance
# Test 4.1
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objFOR", "FOR test verify test"]

   # Verify that the attribute Result1 does not equal 40.

   Has_Failed = FALSE
   last_failed_result = 0

   for each_instance in {all_instances_of_FOR} do

      if each_instance.ResultA = 40 then
         Has_Failed = TRUE
         last_failed_result = each_instance.ResultA
      endif

   endfor

   if not Has_Failed then
      [] = RPT2:Test_Passed["objFOR", Test, 0]
   else
      [] = RPT3:Test_Failed["objFOR", Test, last_failed_result]
   endif

   Test = Test + 1

# End Test 5

#------------------------------------------------------------------------#
# Test 6 - FOR with BREAKIF inside another logical statement
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objFOR", "BREAKIF inside a logical statement"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0432"]

   Count = 0 

   for each_instance in {all_instances_of_FOR} do

      if Count != 3 then
         breakif Count > 2
      endif

      each_instance.ResultA = 50
      Count = Count + 1

   endfor

   # Verify that the total number of instance affect was FOUR.
   if  Count != 4 then
      [] = RPT3:Test_Failed["objFOR", Test, Count]
      Has_Failed = TRUE
   else
      [] = RPT2:Test_Passed["ObjFOR", Test, Count]
   endif

   Test = Test + 1

# End Test 6

#------------------------------------------------------------------------#
# Test 7 - FOR with BREAK inside another logical statement
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objFOR", "BREAKIF inside another logical statement"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0432"]

   Count = 0

   for each_instance in {all_instances_of_FOR} do

      if Count = 3 then
         break
      endif

      each_instance.ResultA = 60
      Count = Count + 1

   endfor

   # Verify that the total number of instance affect was THREE.
   if  Count != 3 then
      [] = RPT3:Test_Failed["objFOR", Test, Count]
      Has_Failed = TRUE
   else
      [] = RPT2:Test_Passed["objFOR", Test, Count]
   endif

   Test = Test + 1

# End Test 7

#------------------------------------------------------------------------#
# Test 8 - After a FOR loop check that the loop variable is still valid
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "ASL Mapping", "objFOR", "FOR loop check variable is still valid"]

   # Check that the previously used loop variable is still valid
   if each_instance = UNDEFINED then
      [] = RPT3:Test_Failed["objFOR", Test, -1]
      Has_Failed = TRUE
   else
      each_instance.ResultA = 70
      [] = RPT2:Test_Passed["objFOR", Test, each_instance.ResultA]
   endif

   Test = Test + 1

# End Test 8

#------------------------------------------------------------------------#

Final_Test = Test',3,'',"00000000-0000-0000-0000-000000000000",2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000244","00000000-0000-0000-0000-00000000003f",'do_loop_tests','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
#
# LOOP statement
#
# The ASL <loop> statement shall be supported
# 1103-0000-01-0441
#
# The ASL <break> statement shall be supported
# 1103-0000-01-0451
#
# The ASL <break ... if> statement shall be supported
# 1103-0000-01-0452
#
#------------------------------------------------------------------------#

   Test = Test_Start

#------------------------------------------------------------------------#
#Test 1 - LOOP with BREAKIF
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0441", "ASL Mapping", "objLOOP", "Loop with BREAKIF"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0452"]

   # Increment the attribute ResultA for an instance of Object_LOOP 5 times
   Count = 0

   loop
      Count = Count + 1
      an_instanceLOOP.ResultA = Count
      breakif Count = 5
   endloop

   # Check the results
   if Count != 5 then
      [] = RPT3:Test_Failed["objLOOP", Test, Count]
   else
      an_instanceLOOP.ResultA = 10
      [] = RPT2:Test_Passed["objLOOP", Test, an_instanceLOOP.ResultA]
   endif

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - LOOP with BREAK, break after other ASL statements
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0441", "ASL Mapping", "objLOOP", "BREAK after other statement"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0451"]

   # Increment the attribute ResultA for an instance of Object_LOOP once
   Count = 0
   
   loop
      Count = Count + 1
      an_instanceLOOP.ResultA = Count
      break
   endloop

   # Check the results
   if Count != 1 then
      [] = RPT3:Test_Failed["objLOOP", Test, Count]
   else
      an_instanceLOOP.ResultA = 20
      [] = RPT2:Test_Passed["objLOOP", Test, an_instanceLOOP.ResultA]
   endif

   Test = Test + 1

# End Test 2

#------------------------------------------------------------------------#
# Test 3 - LOOP with BREAK, break before other ASL statements
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0441", "ASL Mapping", "objLOOP", "BREAK before other statements"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0451"]

   # Attribute ResultA is NOT AFFECTED
   Count = 0

   loop
      break
      Count = Count + 1
      an_instanceLOOP.ResultA = Count
   endloop

   # Until this point value written into ResultA should be 20
   if (Count != 0 | an_instanceLOOP.ResultA != 20) then
      [] = RPT3:Test_Failed["objLOOP", Test, Count]
   else
      an_instanceLOOP.ResultA = 30
      [] = RPT2:Test_Passed["objLOOP", Test, an_instanceLOOP.ResultA]
   endif

   Test = Test + 1

# End Test 3

#------------------------------------------------------------------------#
# Test 4 - LOOP with BREAKIF inside another ASL statement
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0441", "ASL Mapping", "objLOOP", "BREAK inside statement"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0452"]

   # Increment the attribute ResultA for an instance of Object_LOOP 4 times
   Count = 0

   loop
      Count = Count + 1
      an_instanceLOOP.ResultA = Count  

      if Count != 3 then
         breakif Count > 2
      endif

   endloop

   # Check the results
   if Count != 4 then
      [] = RPT3:Test_Failed["objLOOP", Test, Count]
   else
      an_instanceLOOP.ResultA = 40
      [] = RPT2:Test_Passed["objLOOP", Test, an_instanceLOOP.ResultA]
   endif

   Test = Test + 1

# End Test 4

#------------------------------------------------------------------------#
# Test 5 - LOOP with BREAK inside another ASL statement
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0441", "ASL Mapping", "objLOOP", "Inside ASL statement"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0451"]
 
   # Increment the attribute ResultA for an instance of Object_LOOP 3 times
   Count = 0

   loop
      Count = Count + 1
      an_instanceLOOP.ResultA = Count

      if Count = 3 then
         break
      endif

   endloop

   # Check the results
   if Count != 3 then
      [] = RPT3:Test_Failed["objLOOP", Test, Count]
   else
      an_instanceLOOP.ResultA = 50
      [] = RPT2:Test_Passed["objLOOP", Test, an_instanceLOOP.ResultA]
   endif

   Test = Test + 1

# End Test 5

#------------------------------------------------------------------------#
# Test complete
#------------------------------------------------------------------------#

Final_Test = Test',3,'',"00000000-0000-0000-0000-000000000000",2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000277","00000000-0000-0000-0000-00000000004a",'do_nested_tests','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# Test 1 - This test verifies the mapping of nested ASL statements into 
#          the application langauge.
#
#          The nature of the nested statements means that the LOOP 
#          statement is encountered 5 times. The following paragraphs 
#          indicate what data is written into attribute ''ResultB'' each 
#          time the LOOP statement is encountered.
#
#          The instances affected the first time the LOOP statement is 
#          encountered are 5, 4, and 3, hence the atttribute ''ResultB'' has 
#          the value 1, 2 and 3 written into it.
#
#          The instances affected the second time the LOOP statement is 
#          encountered are 2 and 1, hence the atttribute ''ResultB'' has the 
#          value 1 and 2 written into it.
#
#          Thereafter the attribute ''ResultB'' is unaffected.
#------------------------------------------------------------------------#

   Test = Test_Start

   [] = RPT1:Start_Test[Test, "1103-0000-01-0441", "ASL Mapping", "objNESTED", "Nested logic"]
   Has_Failed = FALSE

   #---------------------------------------------------------------------#
   # Ensure that each instance of the attributes ResultA and ResultB are 
   # set to zero
   #---------------------------------------------------------------------#

   {all_instances_of_NESTED} = find-all Object_NESTED
   for each_instance in {all_instances_of_NESTED} do
      each_instance.ResultA = 0
      each_instance.ResultB = 0
   endfor

   #---------------------------------------------------------------------#
   # FOR, IF, LOOP with BREAKIF affecting the LOOP statement.
   #
   # The FOR statement will cause the attribute ResultA for all instances 
   # to be set to the value of countA.
   #
   # The LOOP statement will cause the attribute ResulB to be set to the 
   # value of countB.
   #---------------------------------------------------------------------#

   countA = 0

   for each_instance in {all_instances_of_NESTED} do

      if each_instance.ResultA = 0 then
         each_instance.ResultA = countA
         countB = 1

         loop
            an_instance_of_NESTED = find-one Object_NESTED where ResultB = 0

            if an_instance_of_NESTED != UNDEFINED then
               an_instance_of_NESTED.ResultB = countB
            endif

            countB = countB + 1
            breakif countB = 4

         endloop

         # Verify the BREAKIF statement.
         if countB != 4 then
            Has_Failed = TRUE
         endif

      endif

      countA = countA + 1

   endfor

   # Verify that all instances in Object_NESTED where affected
   if countA = 5 then

      if not Has_Failed then
         [] = RPT2:Test_Passed["objNESTED", Test, 0]
      else
         [] = RPT3:Test_Failed["objNESTED", Test, -10]
      endif

   else
      [] = RPT3:Test_Failed["objNESTED", Test, -20]
   endif

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - This test verifies the mapping of nested ASL statements into 
#          the application language.
#          The nature of the nested statements means that the LOOP 
#          statement is encountered 5 times, Each time a value is written 
#          into attribute ''ResultA''.
#
#          A value is written into a different instance of attribute 
#          ''ResultB'' until the BREAK statement is encountered within the 
#          LOOP statement, i.e. the LOOP will break after one pass.
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0441", "ASL Mapping", "objNESTED", "Loop breaks after one pass"]
   Has_Failed = FALSE


   #---------------------------------------------------------------------#
   # Ensure that each instance of attributes ResultA and ResultB are set 
   # to zero.
   #---------------------------------------------------------------------#

   {all_instances_of_NESTED} = find-all Object_NESTED
   for each_instance in {all_instances_of_NESTED} do
      each_instance.ResultA = 0
      each_instance.ResultB = 0
   endfor

   #---------------------------------------------------------------------#
   # FOR, IF, LOOP with BREAK affecting the LOOP statement
   #
   # The FOR statement will cause attribute ResultA for each instance to 
   # be set to the value of countA.
   #
   # The LOOP statement will cause the attribute ResultB to be set to the
   # value of countB.
   # The BREAK statement ensures that only one instances is affected at
   # one time.
   #---------------------------------------------------------------------#

   countA = 0
   countC = 0
   for each_instance in {all_instances_of_NESTED} do

      if each_instance.ResultA = 0 then
         each_instance.ResultA = countA
         countB = 0

         loop
            an_instance_of_NESTED = find-one Object_NESTED where ResultB = 0

            if an_instance_of_NESTED != UNDEFINED then
               an_instance_of_NESTED.ResultB = countC
            endif

            countC = countC + 1
            countB = countB + 1
            break

         endloop

         if (countB != 1) then
            Has_Failed = TRUE
         endif

      endif

      countA = countA + 1

   endfor

   if countA = 5 then

      if not Has_Failed then
         [] = RPT2:Test_Passed["objNESTED", Test, 0]
      else
         [] = RPT3:Test_Failed["objNESTED", Test, -10]
      endif

   else
      [] = RPT3:Test_Failed["objNESTED", Test, -20]
   endif

   Test = Test + 1

# End Test 2

#------------------------------------------------------------------------#
# Test 3 - These tests verify the mapping of nested ASL statements into 
#          the application language.
#
#          During test 2 the attribute ''ResultB'' is incremented in steps 
#          of 100 until it reaches its final value of 400.
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objNESTED", "Nested Logic"]

   # Ensure that the attributes ResultA and ResultB are set to zero
   {all_instance_of_NESTED} = find-all Object_NESTED
   for each_instance in {all_instance_of_NESTED} do
      each_instance.ResultA = 0
      each_instance.ResultB = 0
   endfor

   # Check the number of instances in the set ''all_instance_of_NESTED''
   countA = countof {all_instance_of_NESTED}
   if countA != 5 then
      [] = RPT3:Test_Failed["objNESTED", Test, -10]
   else
      [] = RPT2:Test_Passed["objNESTED", Test, 0]
   endif

   Test = Test + 1

# End Test 3

#------------------------------------------------------------------------#
# Test 4
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objNESTED", "Nested Logic"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0432"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0441"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0451"]

   # Affect only one instance
   loop

      for each_instance in {all_instance_of_NESTED} do
         each_instance.ResultA = 100
         break       
         # This BREAK will cause the FOR to complete
      endfor

      countA = countA - 1
      break          
      # This BREAK will cause the LOOP to complete

   endloop

    if countA != 4 then
      [] = RPT3:Test_Failed["objNESTED", Test, -10]
   else
      [] = RPT2:Test_Passed["objNESTED", Test, 0]
   endif

   Test = Test + 1

# End Test 4

#------------------------------------------------------------------------#
# Test 5
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objNESTED", "Nested Logic"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0432"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0441"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0452"]

   Has_Failed = FALSE

   # Increment the attribute ResultB four times, for two instances of
   # Object_NESTED.
   countA = 1
 
   for each_instance in {all_instance_of_NESTED} do
      each_instance.ResultA = countA
      countB = 0

      loop
         temp = each_instance.ResultB + 100
         each_instance.ResultB = temp
         countB = countB + 1
         breakif countB = 4
      endloop

      # Check the value written to the attribute Test
      if each_instance.ResultB != 400 then
         [] = RPT3:Test_Failed["objNESTED", Test, -10]
         Has_Failed = TRUE
      endif

      # Check that the attribute ResultB has only been incremented four times
      if countB != 4 then
         [] = RPT3:Test_Failed["objNESTED", Test, -20]
         Has_Failed = TRUE
      endif

      countA = countA + 1
      breakif countA = 3   
      # Only affect 2 instances of Object_NESTED
   endfor
  
   # Check that only two instances have been altered
   if countA != 3 then
      [] = RPT3:Test_Failed["objNESTED", Test, -30]
      Has_Failed = TRUE
   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["objNESTED", Test, 0]
   endif

   Test = Test + 1

# End Test 5

#------------------------------------------------------------------------#

Final_Test = Test',3,'',"00000000-0000-0000-0000-000000000000",2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000002b5","00000000-0000-0000-0000-000000000055",'do_switch','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
#
# SWITCH Statement
#
# The ASL <switch> statement shall be supported
# 1103-0000-01-0411
#
#------------------------------------------------------------------------#

   Test = Test_Start

#------------------------------------------------------------------------#
# Test 1 - SWITCH statement without the default option
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "ASL Mapping", "objSWITCH", "SWITCH without default option"]
   [] = RPT4:Test_Unsupported[Test]

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - SWITCH statement with the DEFAULT option
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0411", "ASL Mapping", "objSWITCH", "SWITCH with default option"]

   {all_instance_of_SWITCH} = find-all Object_SWITCH
   countA = 0
   countB = 0
   countC = 0
   countD = 0
   countE = 0

   for each_instance in {all_instance_of_SWITCH} do

      switch each_instance.IntegerAttr

         case 1
            temp = each_instance.ResultA + 10
            each_instance.ResultA = temp
            countA = countA + 1
 
         case 2
            temp = each_instance.ResultA + 11
            each_instance.ResultA = temp
            countB = countB + 1

         case 3
            temp = each_instance.ResultA + 12
            each_instance.ResultA = temp
            countC = countC + 1

         default
            temp = each_instance.ResultA + 9
            each_instance.ResultA = temp
            countD = countD + 1

      endswitch

      countE = countE + 1

   endfor

   # Verify count values
   if (countA != 1)|(countB != 2)|(countC != 3)|(countD != 4)|\
      (countE != 10) then

      [] = RPT3:Test_Failed["objSWITCH", Test, -10]
   else
      [] = RPT2:Test_Passed["objSWITCH", Test, 0]
   endif

   Test = Test + 1

# End Test 2

#------------------------------------------------------------------------#

Final_Test = Test

',3,'',"00000000-0000-0000-0000-000000000000",2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000305","00000000-0000-0000-0000-000000000060",'do_arithmetic_and_logic','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# Arithmetical calculations
#
# Assigning arithmetic calculations to a variable shall be supported
# 1103-0000-01-0811
#
# Assigning arithmetic calculations to an attribute shall be supported
# 1103-0000-01-0812
#
# Arithmetic operations shall be limited to the numeric base type Integer
# and Real only
# 1103-0000-01-0813
#
# The following operators shall be supported: +, -, /, *, ^, unary -
# 1103-0000-01-0814
#
# The rules of precedence shall be defined by the Ada language and should
# be clarified with brackets where necessary
# 1103-0000-01-0815
#
#------------------------------------------------------------------------#

   [Host] = WAW1:What_Env[]
   Test = Test_Start

#------------------------------------------------------------------------#
# Test 1 - Arithmetical operation +
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0811", "ASL Mapping", "objLOGIC", "Arithmetical ADD operation"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0814"]

   Temp = 1 + 2 + 3
   an_instanceLOGIC.ResultA = Temp

   if Temp != 6 then
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   else
      [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
   endif

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - Arithmetical operation -
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test,"1103-0000-01-0811", "ASL Mapping", "objLOGIC", "Arithmetical SUBTRACT operation"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0814"]

   Temp = 10 - 3 - 4 - 1
   an_instanceLOGIC.ResultA = Temp

   if Temp != 2 then
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   else
      [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
   endif

   Test = Test + 1

# End Test 2

#------------------------------------------------------------------------#
# Test 3 - Arithmetical DIVIDE operation
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0811", "ASL Mapping", "objLOGIC", "Arithmetical DIVIDE operation"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0814"]

   Has_Failed = FALSE

   Temp = 10 / 2
   an_instanceLOGIC.ResultA = Temp

   if Temp != 5 then
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
      Has_Failed = TRUE
   endif

   Temp = 16 / 4 / 2
   an_instanceLOGIC.ResultA = Temp

   if Temp != 2 then
      [] = RPT3:Test_Failed["objLOGIC", Test, -20]
      Has_Failed = TRUE
   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
   endif

   Test = Test + 1

# End Test 3

#------------------------------------------------------------------------#
# Test 4 - Arithmetical operation *
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0811", "ASL Mapping", "objLOGIC", "Arithmetical MULTIPLY operation "]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0814"]

   Has_Failed = FALSE

   Temp = 10 * 2
   an_instanceLOGIC.ResultA = Temp

   if Temp != 20 then
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
      Has_Failed = TRUE
   endif

   Temp = 10 * 2 * 5
   an_instanceLOGIC.ResultA = Temp

   if Temp != 100 then
      [] = RPT3:Test_Failed["objLOGIC", Test, -20]
      Has_Failed = TRUE
   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
   endif

   Test = Test + 1

# End Test 4

#------------------------------------------------------------------------#
# Test 5 - Arithmetical operation ^
#          The following is not supported by ISIM
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "objLOGIC", "Arithmetical POWER operation 1"]

   if Host = "ISIM" then
      Supported = FALSE
      Temp = 1
   else
      Supported = TRUE

      #$ADA_INLINE
      #   Temp := 2**10;
      #$END_ADAINLINE
   endif

   an_instanceLOGIC.ResultA = Temp

   if Supported = TRUE then

      if Temp != 1024 then
         [] = RPT3:Test_Failed["objLOGIC", Test, -10]
      else
         [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
      endif

   else
      [] = RPT4:Test_Unsupported[Test]
   endif

   Test = Test + 1

# End Test 5

# ------------------------------------------------------------------------#
# Test 6 - Arithmetical POWER operation 2
#          The following is not supported by ISIM
# ------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "objLOGIC", "Arithmetical POWER operation 2"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0815"]

   if Host = "ISIM" then
      Supported = FALSE
      Temp = 1
   else
      Supported = TRUE

      #$ADA_INLINE
      #   Temp := (2**2)**2;
      #$END_ADAINLINE
   endif

   if Supported = TRUE then
      an_instanceLOGIC.ResultA = Temp
     
      if Temp != 16 then
         [] = RPT3:Test_Failed["objLOGIC", Test, -10]
      else
         [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
      endif

   else   
      [] = RPT4:Test_Unsupported[Test]
   endif

   Test = Test + 1

# End Test 6

#------------------------------------------------------------------------#
# Test 7 - Complex arithmetic operations 1
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "objLOGIC", "Complex arithmetic operations 1"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0815"]

   Has_Failed = FALSE

   # Complex logical operations

   if Host = "ISIM" then
      Supported = FALSE
      Temp = 1
   else
      Supported = TRUE

      #$ADA_INLINE
      #   Temp := Application_Types.Base_Integer_Type((3 * 4) + 13)**2;
      #$END_ADAINLINE

   endif

   if Supported = TRUE then
      an_instanceLOGIC.ResultA = Temp
   
      if Temp != 625 then
         [] = RPT3:Test_Failed["objLOGIC", Test, -10]
      else
         [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
      endif

   else   
      [] = RPT4:Test_Unsupported[Test]
   endif

   Test = Test + 1

# End Test 7

#------------------------------------------------------------------------#
# Test 8 -Complex arithmetic operations 2
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "objLOGIC", "Complex arithmetic operations 2"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0815"]

   if Host = "ISIM" then
      Supported = FALSE
      Temp = 1
   else
      Supported = TRUE

      #$ADA_INLINE
      #   Temp := 100 - Application_Types.Base_Integer_Type((50 - 46)/2) + 2**(2 + 3);
      #$END_ADAINLINE

   endif

   if Supported = TRUE then
      an_instanceLOGIC.ResultA = Temp

      if Temp != 130 then
         [] = RPT3:Test_Failed["objLOGIC", Test, -10]
      else
         [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
      endif

   else   
      [] = RPT4:Test_Unsupported[Test]
   endif

   Test = Test + 1

# End Test 8

#------------------------------------------------------------------------#
# Test 9 - Evaluation order
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "objLOGIC", "Evaluation order"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0815"]

   Has_Failed = FALSE

   # Parenthical expressions
   Temp = 3 * 3 * 3 + 4 + 13 - 2
   an_instanceLOGIC.ResultA = Temp

   if Temp != 42 then
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   else
      [] = RPT2:Test_Passed["objLOGIC", Test, 0]
   endif

   Test = Test + 1

# End Test 9

#------------------------------------------------------------------------#
# Test 10 - Evaluation order 1
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "objLOGIC", "Evaluation order 1"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0815"]

   Temp = 3 - 2 * 3 * 3 + 4 + 13 - 2
   an_instanceLOGIC.ResultA = Temp

   if Temp != 0 then
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   else
      [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
   endif

   Test = Test + 1

# End Test 10

#------------------------------------------------------------------------#
# Test 11 - Evaluation order 2
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "objLOGIC", "Evaluation order 2"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0815"]

   Temp = (3 - 2) * 3 * 3 + 4 + 13 - 2
   an_instanceLOGIC.ResultA = Temp

   if Temp != 24 then
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   else
      [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
   endif

   Test = Test + 1

# End Test 11

#------------------------------------------------------------------------#
# Test 12 - Evaluation order 3
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "objLOGIC", "Evaluation order 3"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0815"]

   Temp = ((3 - 2) + 3 - (4 - 2)) * 3
   an_instanceLOGIC.ResultA = Temp
 
   if Temp != 6 then
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   else
      [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
   endif

   Test = Test + 1

# End Test 12

#------------------------------------------------------------------------#
# Test 13 - Arithmetic operations on an attrubute. 
#           Arithmetic PLUS operation
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0812", "ASL Mapping", "objLOGIC", "Add operation on attribute"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0814"]

   if Host = "WACA" then
      #$ADA_INLINE
      #
      #   Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr := 1 + 2 + 3;
      #   Temp := Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr;
      #$END_ADAINLINE
   else
      Temp = 6
   endif

   #an_instanceLOGIC.IntegerAttr = 1 + 2 + 3

   if Temp = 6 then
      [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   endif

   Test = Test + 1

# End Test 13
    

#------------------------------------------------------------------------#
# Test 14 - Arithmetic operations on an attribute.
#           Arithmetic - operation
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0812", "ASL Mapping", "objLOGIC", "Subtract operation on attribute"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0814"]

   if Host = "WACA" then
      #$ADA_INLINE
      #
      #   Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr := 10 - 3 - 2 - 1;
      #   Temp := Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr;
      #$END_ADAINLINE
   else
      Temp = 4
   endif

   if Temp = 4 then
      [] = RPT2:Test_Passed["objLOGIC", Test, Temp]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, Temp]
   endif

   Test = Test + 1

# End Test 14

#------------------------------------------------------------------------#
# Test 15 - Arithmetic operations on an attribute.
#           Arithmetic DEVIDE operation
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0812", "ASL Mapping", "objLOGIC", "DIVIDE operation on attribute"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0814"]

   Has_Failed = FALSE

   if Host = "WACA" then
      #$ADA_INLINE
      #
      #   Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).RealAttr := 10.0 / 2.0;
      #   Real_Temp := Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).RealAttr;
      #$END_ADAINLINE
   else
      Real_Temp = 5.0
   endif

   if Real_Temp != 5.0 then
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   else

      if Host = "WACA" then
         #$ADA_INLINE
         #
         #   Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).RealAttr := 10.0 / 4.0;
         #   Real_Temp := Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).RealAttr;
         #$END_ADAINLINE
      else
         Real_Temp = 2.5
      endif

      if Real_Temp != 2.5 then
         [] = RPT3:Test_Failed["objLOGIC", Test, -20]
      else
         [] = RPT2:Test_Passed["objLOGIC", Test, 0]
      endif

   endif

   Test = Test + 1

# End Test 15

#------------------------------------------------------------------------#
# Test 16 - Arithmetic operations on an attribute.
#           Arithmetic MULTIPLY operation
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0812", "ASL Mapping", "objLOGIC", "MULTIPLY operation on attribute "]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0814"]

   if Host = "WACA" then
      #$ADA_INLINE
      #
      #   Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr := 10 * 2;
      #   Temp := Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr;
      #$END_ADAINLINE
   else
      Temp = 20
   endif

   if Temp != 20 then
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   else

      if Host = "WACA" then
         #$ADA_INLINE
         #
         #   Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr := 10 * 2 * 5;
         #   Temp := Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr;
         #$END_ADAINLINE
      else
         Temp = 100
      endif
 
      if Temp != 100 then
         [] = RPT3:Test_Failed["objLOGIC", Test, -20]
      else
         [] = RPT2:Test_Passed["objLOGIC", Test, 0]
      endif

   endif

   Test = Test + 1

# End Test 16

#------------------------------------------------------------------------#
# Test 17 - Arithmetic operations on an attribute.
#           Arithmetic POWER operation
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "ASL Mapping", "objLOGIC", "POWER operation on attribute"]

   [] = RPT4:Test_Unsupported[Test]

   Test = Test + 1

# End Test 17

#------------------------------------------------------------------------#
# Test 18 - Arithmetic operations on an attribute.
#           Arithmetic UNARY - operation
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0812", "ASL Mapping", "objLOGIC", "UNARY operation on attribute"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0814"]

   if Host = "WACA" then
      #$ADA_INLINE
      #
      #   Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr := -10 - 5 + 3;
      #   Temp := Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr;
      #$END_ADAINLINE

      if Temp != -12 then
         [] = RPT3:Test_Failed["objLOGIC", Test, -10]
      else
         [] = RPT2:Test_Passed["objLOGIC", Test, 0]
      endif

   else
      [] = RPT4:Test_Unsupported[Test]
   endif

#   an_instanceLOGIC.IntegerAttr = -10 - 5 + 3

   Test = Test + 1

# End Test 18

#------------------------------------------------------------------------#
# Logical conditions, Boolean and Integers
#------------------------------------------------------------------------#

#------------------------------------------------------------------------#
# Test 19 - Boolean operators
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0911", "ASL Mapping", "objLOGIC", "Boolean operators"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0913"]

   Has_Failed = FALSE

   # Boolean operator !
   # Other logical conditions =, !=

   btemp = an_instanceLOGIC.BooleanAttr
   
   if btemp = TRUE then        

      # Initial Boolean expression is TRUE
      btempA = FALSE        

      # Negate the Boolean expression, FALSE

      an_instanceLOGIC.BooleanAttr = btempA

      if btempA != FALSE then   
         # Boolean expression should now be FALSE
         [] = RPT3:Test_Failed["objLOGIC", Test, -15]
         Has_Failed = TRUE
      else
         an_instanceLOGIC.ResultA = 10
         [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
      endif

   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -16]
      Has_Failed = TRUE
   endif

   Test = Test + 1

# End Test 19

#------------------------------------------------------------------------#
# Test 20 - Logical expressions 1
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0911", "ASL Mapping", "objLOGIC", "Logical expressions 1"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0913"]

   # Initial data
   tempA = 10
   tempB = 3
   tempC = 5

   Has_Failed = FALSE

   # Perform test
   if ((tempA = 10) | (tempB = 77)) & (tempC != 112) then
      an_instanceLOGIC.ResultA = 20
      [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -17]
      Has_Failed = TRUE
   endif

   Test = Test +  1

# End Test 20

#------------------------------------------------------------------------#
# Test 21 - Logical expressions 2
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0911", "ASL Mapping", "objLOGIC", "Logical expressions 2"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0913"]

   Has_Failed = FALSE

   # Perform test
   if (tempA >= 10) & (tempB < 77) & (tempA >= tempC) then
      an_instanceLOGIC.ResultA = 30
      [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -18]
      Has_Failed = TRUE
   endif

   Test = Test + 1

# End Test 21

#------------------------------------------------------------------------#
# Test 22 - Logical expressions 3
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0911", "ASL Mapping", "objLOGIC", "Logical expressions 3"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0913"]

   Has_Failed = FALSE

   # Perform test
   if (tempA > tempB) & (tempB <= 3) & (tempC <= 6) then
      an_instanceLOGIC.ResultA = 40
      [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -19]
      Has_Failed = TRUE
   endif

   Test = Test + 1

# End Test 22

#------------------------------------------------------------------------#
# Test 23 - REVERSE Logical expressions
#           THE FOLLOWING CAUSES AN ASL COMPILER ERROR
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0911", "ASL Mapping", "objLOGIC", "REVERSE Logical expressions"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0913"]

   Has_Failed = FALSE

   # Perform test
   Local_Boolean_Result = FALSE

   if Host = "WACA" then
      #$ADA_INLINE
      #
      #   Local_Boolean_Result := Boolean (99 > tempB);
      #
      #$END_ADAINLINE

      if Local_Boolean_Result = TRUE then
         an_instanceLOGIC.ResultA = 50
         [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
      else
         [] = RPT3:Test_Failed["objLOGIC", Test, -20]
      endif

   else

      if (tempB < 99) then
         an_instanceLOGIC.ResultA = 50
         [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
      else
         [] = RPT3:Test_Failed["objLOGIC", Test, -20]
      endif

   endif

   Test = Test + 1

# End Test 23

#------------------------------------------------------------------------#
#
# These tests verify the logical conditions for the following data types:
#
#        Date
#        Time
#
# The following operators are valid for both data types:
#
#        =, =>, <=, <, >
#
# Test 1 and 2, are built of nested IF statements, the final value written
# into the attribute ''ResultA'' is 70.
#
# If the final value is not 70 then an error would have occured during
# verification, the value of which indicating where the error occured.
#------------------------------------------------------------------------#

#------------------------------------------------------------------------#
# Test 24
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "ASL Mapping", "objLOGIC","Date and Time operations"]

   Has_Failed = FALSE


   # Date attribute not supported in S/W architecture. So don''t test.

   #Date
   #if an_instanceLOGIC.DateAttr = 1996.03.02 then
   #   an_instanceLOGIC.ResultA = 10
   #   if an_instanceLOGIC.DateAttr >= 1996.03.02 then
   #      an_instanceLOGIC.ResultA = 20
   #      if an_instanceLOGIC.DateAttr >= 1996.03.01 then
   #         an_instanceLOGIC.ResultA = 30
   #         if an_instanceLOGIC.DateAttr <= 1996.03.02 then
   #            an_instanceLOGIC.ResultA = 40
   #            if an_instanceLOGIC.DateAttr <= 1996.03.03 then
   #               an_instanceLOGIC.ResultA = 50
   #               if an_instanceLOGIC.DateAttr < 1997.03.02 then
   #                  an_instanceLOGIC.ResultA = 60
   #                  if an_instanceLOGIC.DateAttr > 1996.01.03 then
   #                     an_instanceLOGIC.ResultA = 70
   #                  else
   #   [] = RPT3:Test_Failed["objLOGIC", Test, -21]
   #   has_failed = TRUE
   #                  endif
   #               else
   #   [] = RPT3:Test_Failed["objLOGIC", Test, -22]
   #   has_failed = TRUE
   #               endif
   #            else
   #   [] = RPT3:Test_Failed["objLOGIC", Test, -23]
   #   has_failed = TRUE
   #            endif
   #         else
   #   [] = RPT3:Test_Failed["objLOGIC", Test, -24]
   #   has_failed = TRUE
   #         endif
   #      else
   #   [] = RPT3:Test_Failed["objLOGIC", Test, -25]
   #   has_failed = TRUE
   #      endif
   #   else
   #   [] = RPT3:Test_Failed["objLOGIC", Test, -26]
   #   has_failed = TRUE
   #   endif
   #else
   #   [] = RPT3:Test_Failed["objLOGIC", Test, -27]
   #   has_failed = TRUE
   #endif

   [] = RPT4:Test_Unsupported[Test]

   Test = Test + 1

# End Test 24

#------------------------------------------------------------------------#
# Test 25
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "ASL Mapping", "objLOGIC","Date and Time operations"]

   Has_Failed = FALSE

   # Time operations not supported by S/W architecture.

   #Time
   #if an_instanceLOGIC.TimeAttr = 14:45:34 then
   #   an_instanceLOGIC.ResultA = 10
   #   if an_instanceLOGIC.TimeAttr >= 14:45:34 then
   #      an_instanceLOGIC.ResultA = 20
   #      if an_instanceLOGIC.TimeAttr >= 14:45:33 then
   #         an_instanceLOGIC.ResultA = 30
   #         if an_instanceLOGIC.TimeAttr <= 14:45:34 then
   #            an_instanceLOGIC.ResultA = 40
   #            if an_instanceLOGIC.TimeAttr <= 14:45:35 then
   #               an_instanceLOGIC.ResultA = 50
   #               if an_instanceLOGIC.TimeAttr < 14:46:34 then
   #                  an_instanceLOGIC.ResultA = 60
   #                  if an_instanceLOGIC.TimeAttr > 13:45:34 then
   #                     an_instanceLOGIC.ResultA = 70
   #                  else
   #   [] = RPT3:Test_Failed["objLOGIC", Test, -28]
   #   has_failed = TRUE
   #                  endif
   #               else
   #   [] = RPT3:Test_Failed["objLOGIC", Test, -29]
   #   has_failed = TRUE
   #               endif
   #            else
   #   [] = RPT3:Test_Failed["objLOGIC", Test, -30]
   #   has_failed = TRUE
   #            endif
   #         else
   #   [] = RPT3:Test_Failed["objLOGIC", Test, -31]
   #   has_failed = TRUE
   #         endif
   #      else
   #   [] = RPT3:Test_Failed["objLOGIC", Test, -32]
   #   has_failed = TRUE
   #      endif
   #   else
   #   [] = RPT3:Test_Failed["objLOGIC", Test, -33]
   #   has_failed = TRUE
   #   endif
   #else
   #   [] = RPT3:Test_Failed["objLOGIC", Test, -34]
   #   has_failed = TRUE
   #endif

   [] = RPT4:Test_Unsupported[Test]

   Test = Test + 1

# End Test 25

#------------------------------------------------------------------------#
# These tests verify logical conditions for the following data types:
#
#        Text
#        Enumeration
#
# The following operators are valid for the above data types:
#
#        =       Equality
#        !=      Inequality
#
#------------------------------------------------------------------------#

#------------------------------------------------------------------------#
#Logical conditions, TEXT and ENUMERATION
#------------------------------------------------------------------------#

#------------------------------------------------------------------------#
# Test 26 - Logical ops on Text
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "ASL Mapping", "objLOGIC","Logical ops on Text"]

   Has_Failed = FALSE

   # Perform the test
   if an_instanceLOGIC.TextAttr = "Verification" then
      an_instanceLOGIC.ResultA = 10
 
      if an_instanceLOGIC.TextAttr != "Richard" then
         an_instanceLOGIC.ResultA = 20
      else
         [] = RPT3:Test_Failed["objLOGIC", Test, -35]
         Has_Failed = TRUE
      endif

   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -36]
      Has_Failed = TRUE
   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
   endif

   Test = Test + 1

# End Test 26

#------------------------------------------------------------------------#
# Test 27 - Logical ops on Enums
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "ASL Mapping", "objLOGIC","Logical ops on Enums"]

   Has_Failed = FALSE

   # Enumeration Perform the test
   if an_instanceLOGIC.EnumerationAttr = ''Richard'' then
      an_instanceLOGIC.ResultA = 30

      if an_instanceLOGIC.EnumerationAttr != ''Goran'' then
         an_instanceLOGIC.ResultA = 40
      else
         [] = RPT3:Test_Failed["objLOGIC", Test, -37]
         Has_Failed = TRUE
      endif

   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -38]
      Has_Failed = TRUE
   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["objLOGIC", Test, an_instanceLOGIC.ResultA]
   endif

   Test = Test + 1

# End Test 27

#------------------------------------------------------------------------#
# Test 28 - Test logical operator !
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test NOT in symbol form"]

   BoolVal1 = FALSE
  
   if !BoolVal1 then
      [] = RPT2:Test_Passed["objLOGIC", Test, 0]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   endif

   Test = Test + 1

# End Test 28

#------------------------------------------------------------------------#
# Test 29 - Test logical operator NOT
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test NOT in keyword form"]

   BoolVal1 = FALSE
  
   if not BoolVal1 then
      [] = RPT2:Test_Passed["objLOGIC", Test, 0]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   endif

   Test = Test + 1

# End Test 29

#------------------------------------------------------------------------#
# Test 30 - Test logical operator =
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test EQUALS in symbol form"]

   BoolVal1 = FALSE
   BoolVal2 = FALSE  

   if BoolVal1 = BoolVal1 then
      [] = RPT2:Test_Passed["objLOGIC", Test, 0]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   endif

   Test = Test + 1

# End Test 30

#------------------------------------------------------------------------#
# Test 31 - Test logical operator EQUALS
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test EQUALS in keyword form"]

   BoolVal1 = FALSE
   BoolVal2 = FALSE  

   if BoolVal1 equals BoolVal2 then
      [] = RPT2:Test_Passed["objLOGIC", Test, 0]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   endif

   Test = Test + 1

# End Test 31


#------------------------------------------------------------------------#
# Test 32 - Test logical operator !=
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test NOT EQUALS in symbol form"]

   BoolVal1 = FALSE
   BoolVal2 = TRUE  

   if BoolVal1 != BoolVal2 then
      [] = RPT2:Test_Passed["objLOGIC", Test, 0]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   endif

   Test = Test + 1

# End Test 32

#------------------------------------------------------------------------#
# Test 33 - Test logical operator NOT-EQUALS
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test NOT-EQUALS in keyword form"]

   BoolVal1 = FALSE
   BoolVal2 = TRUE  

   if BoolVal1 not-equals BoolVal2 then
      [] = RPT2:Test_Passed["objLOGIC", Test, 0]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   endif

   Test = Test + 1

# End Test 33

#------------------------------------------------------------------------#
# Test 34 - Test logical operator <
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test LESS THAN in symbol form"]

   Val1 = 10
   Val2 = 20  

   if Val1 < Val2 then
      [] = RPT2:Test_Passed["objLOGIC", Test, 0]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   endif

   Test = Test + 1

# End Test 34

#------------------------------------------------------------------------#
# Test 35 - Test logical operator LESS-THAN
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test LESS-THAN in keyword form"]

   Val1 = 10
   Val2 = 20  

   if Val1 less-than Val2 then
      [] = RPT2:Test_Passed["objLOGIC", Test, 0]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   endif

   Test = Test + 1

# End Test 35

#------------------------------------------------------------------------#
# Test 36 - Test logical operator >
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test GREATER THAN in symbol form"]

   Val1 = 10
   Val2 = 20  

   if Val2 > Val1 then
      [] = RPT2:Test_Passed["objLOGIC", Test, 0]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   endif

   Test = Test + 1

# End Test 36

#------------------------------------------------------------------------#
# Test 37 - Test logical operator GREATER-THAN
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test GREATER-THAN in keyword form"]

   Val1 = 10
   Val2 = 20  

   if Val2 greater-than Val1 then
      [] = RPT2:Test_Passed["objLOGIC", Test, 0]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   endif

   Test = Test + 1

# End Test 37

#------------------------------------------------------------------------#
# Test 38 - Test logical operator <=
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test LESS THAN OR EQUAL TO in symbol form"]

   Val1 = 10
   Val2 = 10
   Val3 = 20

   if Val1 <= Val2 then

      if Val1 <= Val3 then
         [] = RPT2:Test_Passed["objLOGIC", Test, 0]
      else
         [] = RPT3:Test_Failed["objLOGIC", Test, -10]
      endif
  
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -20]
   endif

   Test = Test + 1

# End Test 38

#------------------------------------------------------------------------#
# Test 39 - Test logical operator LESS-THAN-OR-EQUAL-TO
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test LESS-THAN-OR-EQUAL-TO in keyword form"]

   Val1 = 10
   Val2 = 10
   Val3 = 20

   if Val1 less-than-or-equal-to Val2 then

      if Val1 less-than-or-equal-to Val3 then
         [] = RPT2:Test_Passed["objLOGIC", Test, 0]
      else
         [] = RPT3:Test_Failed["objLOGIC", Test, -10]
      endif
  
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -20]
   endif

   Test = Test + 1

# End Test 39

#------------------------------------------------------------------------#
# Test 40 - Test logical operator >=
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test GREATER THAN OR EQUAL TO in symbol form"]

   Val1 = 10
   Val2 = 10
   Val3 = 20

   if Val2 >= Val1 then

      if Val3 >= Val1 then
         [] = RPT2:Test_Passed["objLOGIC", Test, 0]
      else
         [] = RPT3:Test_Failed["objLOGIC", Test, -10]
      endif
  
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -20]
   endif

   Test = Test + 1

# End Test 40

#------------------------------------------------------------------------#
# Test 41 - Test logical operator GREATER-THAN-OR-EQUAL-TO
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test GREATER-THAN-OR-EQUAL-TO in keyword form"]

   Val1 = 10
   Val2 = 10
   Val3 = 20

   if Val2 greater-than-or-equal-to Val1 then

      if Val3 greater-than-or-equal-to Val1 then
         [] = RPT2:Test_Passed["objLOGIC", Test, 0]
      else
         [] = RPT3:Test_Failed["objLOGIC", Test, -10]
      endif
  
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -20]
   endif

   Test = Test + 1

# End Test 41

#------------------------------------------------------------------------#
# Test 42 - Test logical operator &
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test AND in symbol form"]

   BoolVal1 = TRUE
   BoolVal2 = TRUE  

   if BoolVal1 & BoolVal2 then
      [] = RPT2:Test_Passed["objLOGIC", Test, 0]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   endif

   Test = Test + 1

# End Test 42

#------------------------------------------------------------------------#
# Test 43 - Test logical operator AND
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test AND in keyword form"]

   BoolVal1 = TRUE
   BoolVal2 = TRUE  

   if BoolVal1 and BoolVal2 then
      [] = RPT2:Test_Passed["objLOGIC", Test, 0]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   endif

   Test = Test + 1

# End Test 43

#------------------------------------------------------------------------#
# Test 44 - Test logical operator |
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test OR in symbol form"]

   BoolVal1 = TRUE
   BoolVal2 = FALSE  

   if BoolVal1 | BoolVal2 then
      [] = RPT2:Test_Passed["objLOGIC", Test, 0]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   endif

   Test = Test + 1

# End Test 44

#------------------------------------------------------------------------#
# Test 45 - Test logical operator OR
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "objLOGIC","Test OR in keyword form"]

   BoolVal1 = TRUE
   BoolVal2 = FALSE  

   if BoolVal1 or BoolVal2 then
      [] = RPT2:Test_Passed["objLOGIC", Test, 0]
   else
      [] = RPT3:Test_Failed["objLOGIC", Test, -10]
   endif

   Test = Test + 1

# End Test 45

#------------------------------------------------------------------------#

Final_Test = Test',3,'',"00000000-0000-0000-0000-000000000000",2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000309","00000000-0000-0000-0000-000000000060",'Perform_Attribute_Assignment','',"ba5eda7a-def5-0000-0000-000000000000",0,'This_Test = Test_Start

[] = RPT1:Start_Test[This_Test, "1103-0000-01-0511", "ASL_Mapping", "Passive Object Service Perform Attribute assignment", "Assign all attributes"]
[] = RPT8:Specify_Requid[This_Test, "1103-0000-01-0522"]

my_object = create Object_LOGIC with IntegerAttr = This_Test &\
    TextAttr = "Hello" &\
    BooleanAttr = FALSE &\
    EnumerationAttr = ''Frank'' &\
    ReferenceLOGIC = This_Test 

my_object = find-one Object_LOGIC where ReferenceLOGIC = This_Test

Failure_Code = 1

if my_object != UNDEFINED then

   if my_object.TextAttr = "Hello" then

      if my_object.BooleanAttr = FALSE then

         if my_object.EnumerationAttr = ''Frank'' then

            Failure_Code = 0
   
         else

            Failure_Code = -40

         endif

      else

         Failure_Code = -30

      endif

   else

      Failure_Code = -20

   endif

   delete my_object

else

   Failure_Code = -10

endif

if Failure_Code = 0 then
   [] = RPT2:Test_Passed["Attribute read", This_Test, Failure_Code]
else
   [] = RPT3:Test_Failed["Attribute read", This_Test, Failure_Code]
endif

This_Test = This_Test + 1

Final_Test = This_Test',3,'',"00000000-0000-0000-0000-000000000305",2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-000000000347","00000000-0000-0000-0000-00000000006b",'do_nested_if','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
#
# Nested IF statements, WITHOUT LOGICAL CONDITIONS
#
# The ASL <if ... else> statement shall be supported
# 1103-0000-01-0422
#
# Logical conditions returning a Boolean data type of true or false shall
# be supported
# 1103-0000-01-0911
#
#------------------------------------------------------------------------#

   Test = Test_Start

#------------------------------------------------------------------------#
# Test 1 - Nested IFs that don''t contain logic.
#------------------------------------------------------------------------#

  [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping","objNESTEDIF", "Do not contain logic"]

   Has_Failed = FALSE

   # Initialise temporary variables
   tempA = 1
   tempB = 2
   tempC = 3
   tempD = 4
   tempE = 5

   # Perform the test, 12 Nested IF statements
   if tempA = 1 then 

      if tempB > 1 then 

         if tempC < 4 then 

            if tempD <= 4 then 

               if tempE >= 5 then 

                  if tempA != 2 then 

                     if tempB <= 3 then 

                        if tempC >= 2 then 
 
                           if tempD != 3 then 

                              if tempE < 6 then 

                                 if tempA > 0 then 

                                    if tempB = 2 then 
                                       an_instanceNESTED_IF.ResultA = 10
                                    else
                                       [] = RPT3:Test_Failed["objNESTEDIF", Test,-10]
                                       Has_Failed = TRUE
                                    endif
                                 else
                                    [] = RPT3:Test_Failed["objNESTEDIF", Test,-20]
                                    Has_Failed = TRUE
                                 endif
                              else
                                 [] = RPT3:Test_Failed["objNESTEDIF", Test,-30]
                                 Has_Failed = TRUE
                              endif
                           else
                              [] = RPT3:Test_Failed["objNESTEDIF", Test,-40]
                              Has_Failed = TRUE
                           endif
                        else
                           [] = RPT3:Test_Failed["objNESTEDIF", Test,-50]
                           Has_Failed = TRUE
                        endif
                     else
                        [] = RPT3:Test_Failed["objNESTEDIF", Test,-60]
                        Has_Failed = TRUE
                     endif
                  else
                     [] = RPT3:Test_Failed["objNESTEDIF", Test,-70]
                     Has_Failed = TRUE
                  endif
               else
                  [] = RPT3:Test_Failed["objNESTEDIF", Test,-80]
                  Has_Failed = TRUE
               endif
            else
               [] = RPT3:Test_Failed["objNESTEDIF", Test,-90]
               Has_Failed = TRUE
            endif
         else
            [] = RPT3:Test_Failed["objNESTEDIF", Test,-100]
            Has_Failed = TRUE
         endif
      else
         [] = RPT3:Test_Failed["objNESTEDIF", Test,-110]
         Has_Failed = TRUE
      endif
   else
      [] = RPT3:Test_Failed["objNESTEDIF", Test,-120]
      Has_Failed = TRUE
   endif

   # Test complete
   if !Has_Failed then
      [] = RPT2:Test_Passed["objNESTEDIF", Test,0]
   endif

   Test = Test + 1

# End Test 1

#------------------------------------------------------------------------#
# Test 2 - Nested IF statements, WITH LOGICAL CONDITIONS
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping","objNESTEDIF", "Contain logical and"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0913"]

   Has_Failed = FALSE

   # Initialise temporary variables
   tempA = 1
   tempB = 2
   tempC = 3
   tempD = 4
   tempE = 5

   # Perform the test
   if ((tempA = 1) & (tempB != 1) & (tempC < 4) & (tempD > 3) & \
      (tempE <= 5) & (tempA >= 1) & (tempB <= 3) & (tempC >= 1)) then 

      if ((tempA = 1) & (tempB != 1) & (tempC < 4) & (tempD > 3) & \
          (tempE <= 5) & (tempA >= 1) & (tempB <= 3) & (tempC >= 1)) then 
      
         an_instanceNESTED_IF.ResultA = 20
      else
         Has_Failed = TRUE
         [] = RPT3:Test_Failed["objNESTEDIF", Test, -10]
      endif

   else
      Has_Failed = TRUE
      [] = RPT3:Test_Failed["objNESTEDIF", Test, -20]
   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["objNESTEDIF", Test, 0]
   endif

   Test = Test + 1

# End Test 2

#------------------------------------------------------------------------#
# Test 3 - Nested IFs that contain logic, using |
#------------------------------------------------------------------------#
  
   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping","objNESTEDIF", "Contain logical or"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0913"]

   Has_Failed = FALSE

   # Perform the test, 12 Nested IF statements
   if ((tempA = 2) | (tempB != 2) | (tempC < 12) | (tempD > 3) | \
      (tempE <= 5) | (tempA >= 7) | (tempB <= 1) | (tempC >= 2)) then 

      if ((tempA = 1) | (tempB != 1) | (tempC < 4) | (tempD > 4) | \
         (tempE <= 5) | (tempA >= 1) | (tempB <= 1) | (tempC >= 2)) then 

         an_instanceNESTED_IF.ResultA = 30
      else
         [] = RPT3:Test_Failed["objNESTEDIF", Test,-10]
         Has_Failed = TRUE
      endif

   else
      [] = RPT3:Test_Failed["objNESTEDIF", Test,-20]
      Has_Failed = TRUE
   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["objNESTEDIF", Test,0]
   endif

   Test = Test + 1

# End Test 3

#------------------------------------------------------------------------#
# Test 4 - Nested IFs that contain logic, mixed
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0422", "ASL Mapping","objNESTEDIF", "Contain logical mixed"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0913"]

   Has_Failed = FALSE

   # Perform the test, 12 Nested IF statements
   if (((tempA = 1) & (tempB != 1)) | (tempC < 4) | (tempD > 3) | \
      (tempE <= 5) | (tempA >= 1) | (tempB <= 1) | (tempC >= 2)) then 

      if ((tempA = 1) | (((tempB != 1) & (tempC < 4)) | (tempD > 3)) | \
         (tempE <= 5) | ((tempA >= 1) & (tempB <= 1) & (tempC >= 2))) then 

         an_instanceNESTED_IF.ResultA = 40
      else
         [] = RPT3:Test_Failed["objNESTEDIF", Test,-10]
         Has_Failed = TRUE
      endif

   else
      [] = RPT3:Test_Failed["objNESTEDIF", Test,-20]
      Has_Failed = TRUE
   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["objNESTEDIF", Test,0]
   endif

   Test = Test + 1

# End Test 4

#------------------------------------------------------------------------#

Final_Test = Test
',3,'',"00000000-0000-0000-0000-000000000000",2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-00000000037a","00000000-0000-0000-0000-000000000076",'do_nested_for','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# Nested FOR statements
#------------------------------------------------------------------------#

   Test = Test_Start

#------------------------------------------------------------------------#
# Test 1 - Nested FOR statements
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0431", "ASL Mapping", "objNESTEDFOR", "Nested FOR statements"]

   Has_Failed = FALSE

   # Create a set of instances to loop over
   {all_instances} = find-all Nested_FOR
   {all_instancesA} = find-all Nested_FOR
   {all_instancesB} = find-all Nested_FOR
   {all_instancesC} = find-all Nested_FOR
   {all_instancesD} = find-all Nested_FOR
   {all_instancesE} = find-all Nested_FOR
   {all_instancesF} = find-all Nested_FOR

   passA = 0
   passB = 0
   passC = 0
   passD = 0
   passE = 0
   passF = 0
  
   # Perform the test
   for each_instanceA in {all_instancesA} do
      passA = passA + 1
 
      for each_instanceB in {all_instancesB} do
         passB = passB + 1

         for each_instanceC in {all_instancesC} do
            passC = passC + 1

            for each_instanceD in {all_instancesD} do
               passD = passD + 1

               for each_instanceE in {all_instancesE} do
                  passE = passE + 1

                  for each_instanceF in {all_instancesF} do
                     tempF = each_instanceF.ResultA + 1
                     each_instanceF.ResultA = tempF
                     passF = passF + 1
                  endfor

               endfor

            endfor

         endfor
   
      endfor

   endfor


   # Check that the attribute ''ResultA'' contains the correct value
   for each_instance in {all_instances} do

      if each_instance.ResultA != 3125 then
         [] = RPT3:Test_Failed["objNESTEDFOR", Test,-1]
         Has_Failed = TRUE
      endif

   endfor

   # Check that the loop variables are still valid
   if (each_instanceA = UNDEFINED)|(each_instanceB = UNDEFINED)|\
      (each_instanceC = UNDEFINED)|(each_instanceD = UNDEFINED)|\
      (each_instanceE = UNDEFINED)|(each_instanceF = UNDEFINED) then

      [] = RPT3:Test_Failed["objNESTEDFOR", Test,-2]
      Has_Failed = TRUE
   endif

   # Test complete
   if !Has_Failed then
      [] = RPT2:Test_Passed["objNESTEDFOR", Test,0]
   endif

   Test = Test + 1

   Final_Test = Test',3,'',"00000000-0000-0000-0000-000000000000",2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000003a6","00000000-0000-0000-0000-000000000081",'do_nested_loops','',"ba5eda7a-def5-0000-0000-000000000000",0,'#------------------------------------------------------------------------#
# Nested LOOP statements
#------------------------------------------------------------------------#

   Test = Test_Start

#------------------------------------------------------------------------#
# Test 1 - Nest Loop statements
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0441", "ASL Mapping", "objNESTEDLOOP","Nest Loop statements"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0452"]

   Has_Failed = FALSE

   # Ensure the attribute ''ResultA'' is set to zero
   if an_instanceNESTED_LOOP.ResultA != 0 then
      an_instanceNESTED_LOOP.ResultA = 0
   endif

   # Perform the test
   countA = 0
   loop
      countB = 0

      loop
         countC = 0

         loop
            countD = 0

            loop
               countE = 0
      
               loop
                  countF = 0
  
                  loop
                     temp = an_instanceNESTED_LOOP.ResultA + 1
                     an_instanceNESTED_LOOP.ResultA = temp
                     countF = countF + 1
                     breakif countF = 5
                  endloop
      
                  temp = an_instanceNESTED_LOOP.ResultA + 1
                  an_instanceNESTED_LOOP.ResultA = temp
                  countE = countE + 1
                  breakif countE = 5
               endloop
   
               temp = an_instanceNESTED_LOOP.ResultA + 1
               an_instanceNESTED_LOOP.ResultA = temp
               countD = countD + 1
               breakif countD = 5
            endloop
   
            temp = an_instanceNESTED_LOOP.ResultA + 1
            an_instanceNESTED_LOOP.ResultA = temp
            countC = countC + 1
            breakif countC = 5
         endloop

         temp = an_instanceNESTED_LOOP.ResultA + 1
         an_instanceNESTED_LOOP.ResultA = temp
         countB = countB + 1
         breakif countB = 5
      endloop
   
      temp = an_instanceNESTED_LOOP.ResultA + 1
      an_instanceNESTED_LOOP.ResultA = temp
      countA = countA + 1
      breakif countA = 5
   endloop

   # Check that the value of attribute ''ResultA'' is correct.
   if an_instanceNESTED_LOOP.ResultA != 19530 then
      [] = RPT3:Test_Failed["objNESTEDFOR",Test, an_instanceNESTED_LOOP.ResultA]
      Has_Failed = TRUE
   endif

   if !Has_Failed then
      [] = RPT2:Test_Passed["objNESTEDFOR",Test, an_instanceNESTED_LOOP.ResultA]
   endif

   Test = Test + 1

   Final_Test = Test

#------------------------------------------------------------------------#',3,'',"00000000-0000-0000-0000-000000000000",2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000005c5","00000000-0000-0000-0000-000000000097",'Receive_Unfeasonableness','',"ba5eda7a-def5-0000-0000-000000000000",0,'[] = RPT1:Start_Test [Current_Test, "1103-0000-01-0522", "ASL_Mapping","Big Object", "Receive big IH"]

if A_Big_Object != UNDEFINED then

   if A_Big_Object.One = Expected_Attribute and \
      A_Big_Object.Forty = Expected_Attribute and  \
      A_Big_Object.Eightyfour = Expected_Attribute then

      [] = RPT2:Test_Passed ["Valid big IH", Current_Test, Expected_Attribute]
   else
       [] = RPT3:Test_Failed["Mismatching big attributes", Current_Test, A_Big_Object.One]
   endif

else
   [] = RPT3:Test_Failed["Invalid big IH", Current_Test, -1]
endif
',3,'',"00000000-0000-0000-0000-000000000000",2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000006d3","00000000-0000-0000-0000-0000000000a2",'Create_Processor','',"ba5eda7a-def5-0000-0000-000000000000",0,'This_Test = Test_Start

[my_timer_id_local] = Create_Timer[]

my_processor = create Processor with Processor_Id = Processor_Id_Local &\
   Background_Processing_Timer_Id = my_timer_id_local &\
   Communications_Enabled = FALSE 

[] = RPT1:Start_Test[This_Test, "Null Requid", "ASL_Mapping", "Active Object Service Perform Attribute assignment", "Assign all attributes"]

my_object = find-one Processor where Processor_Id = Processor_Id_Local

Failure_Code = 1

if my_object != UNDEFINED then

   if my_object.Background_Processing_Timer_Id = my_timer_id_local then

      if my_object.Communications_Enabled = FALSE then

         Failure_Code = 0

      else

         Failure_Code = -3

      endif

   else

      Failure_Code = -2

   endif

   delete my_object

else

   Failure_Code = -1

endif

if Failure_Code = 0 then
   [] = RPT2:Test_Passed["Attribute read", This_Test, Failure_Code]

else
   [] = RPT3:Test_Failed["Attribute read", This_Test, Failure_Code]
endif

This_Test = This_Test + 1

Final_Test = This_Test',3,'',"00000000-0000-0000-0000-000000000000",2 );
INSERT INTO O_TFR VALUES ( "00000000-0000-0000-0000-0000000006ef","00000000-0000-0000-0000-0000000000ad",'Default_Vals_In_Object','',"ba5eda7a-def5-0000-0000-000000000000",0,'[] = RPT1:Start_Test[Test, "1241-0000-01-0115", "ASL Mapping", "Check defaults vals in object", "Check defaults vals in object"]
[] = RPT8:Specify_Requid[Test, "1241-0000-01-0114"]

Set_Vals   = FALSE
Has_Failed = FALSE

[Host] = WAW1:What_Env[]

InstDV = create Default_Vals

if Set_Vals then
   InstDV.The_Integer = 10
   InstDV.The_Real    = 10.0
   InstDV.The_Text    = "Value Set"
   InstDV.The_Boolean = TRUE
endif

   if not Set_Vals then

      if InstDV.The_Integer = 0 then

         if InstDV.The_Real = 0.0 then

            if not InstDV.The_Boolean then

               if Host = "WACA" then 

                  if InstDV.The_Text != "                                " then
                     Has_Failed   = TRUE
                     Failure_Code = -10
                  endif

               else

                   if InstDV.The_Text != "" then
                     Has_Failed   = TRUE
                     Failure_Code = -10
                  endif                 

               endif

            else
               Has_Failed   = TRUE
               Failure_Code = -20
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -30
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -40
      endif

   endif

#-------------------------------------------------------------------#

   if not Has_Failed then
      [] = RPT2:Test_Passed["DV", Test, 0]
   else
      [] = RPT3:Test_Failed["DV", Test, Failure_Code]
   endif

Returning_No = Test + 1',3,'',"00000000-0000-0000-0000-000000000000",2 );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000223","00000000-0000-0000-0000-000000000222",'Test_Start',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000224","00000000-0000-0000-0000-000000000222",'Final_Test',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000223",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000234","00000000-0000-0000-0000-000000000233",'Test_Start',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000235","00000000-0000-0000-0000-000000000233",'Final_Test',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000234",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000245","00000000-0000-0000-0000-000000000244",'an_instanceLOOP',"00000000-0000-0000-0000-000000000043",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000246","00000000-0000-0000-0000-000000000244",'Test_Start',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000245",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000247","00000000-0000-0000-0000-000000000244",'Final_Test',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000246",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000278","00000000-0000-0000-0000-000000000277",'Test_Start',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000279","00000000-0000-0000-0000-000000000277",'Final_Test',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000278",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002b6","00000000-0000-0000-0000-0000000002b5",'Test_Start',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000002b7","00000000-0000-0000-0000-0000000002b5",'Final_Test',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000002b6",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000306","00000000-0000-0000-0000-000000000305",'an_instanceLOGIC',"00000000-0000-0000-0000-000000000064",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000307","00000000-0000-0000-0000-000000000305",'Test_Start',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000306",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000308","00000000-0000-0000-0000-000000000305",'Final_Test',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000307",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-00000000030a","00000000-0000-0000-0000-000000000309",'Test_Start',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-00000000030b","00000000-0000-0000-0000-000000000309",'Final_Test',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-00000000030a",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000348","00000000-0000-0000-0000-000000000347",'an_instanceNESTED_IF',"00000000-0000-0000-0000-00000000006f",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-000000000349","00000000-0000-0000-0000-000000000347",'Test_Start',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000348",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-00000000034a","00000000-0000-0000-0000-000000000347",'Final_Test',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000349",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-00000000037b","00000000-0000-0000-0000-00000000037a",'Test_Start',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-00000000037c","00000000-0000-0000-0000-00000000037a",'Final_Test',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-00000000037b",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000003a7","00000000-0000-0000-0000-0000000003a6",'an_instanceNESTED_LOOP',"00000000-0000-0000-0000-000000000085",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000003a8","00000000-0000-0000-0000-0000000003a6",'Test_Start',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000003a7",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000003a9","00000000-0000-0000-0000-0000000003a6",'Final_Test',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000003a8",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000005c6","00000000-0000-0000-0000-0000000005c5",'A_Big_Object',"00000000-0000-0000-0000-00000000009b",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000005c7","00000000-0000-0000-0000-0000000005c5",'Current_Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000005c6",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000005c8","00000000-0000-0000-0000-0000000005c5",'Expected_Attribute',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-0000000005c7",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000006d4","00000000-0000-0000-0000-0000000006d3",'Test_Start',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000006d5","00000000-0000-0000-0000-0000000006d3",'Processor_Id_Local',"00000000-0000-0000-0000-0000000000fa",0,'',"00000000-0000-0000-0000-0000000006d4",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000006d6","00000000-0000-0000-0000-0000000006d3",'Final_Test',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000006d5",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000006f0","00000000-0000-0000-0000-0000000006ef",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO O_TPARM VALUES ( "00000000-0000-0000-0000-0000000006f1","00000000-0000-0000-0000-0000000006ef",'Returning_No',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-0000000006f0",'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000006","ba5eda7a-def5-0000-0000-000000000004",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000009","00000000-0000-0000-0000-000000000006",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000000c","00000000-0000-0000-0000-000000000006",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000000f","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000012","ba5eda7a-def5-0000-0000-000000000004",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000015","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-000000000018","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000001b","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO S_UDT VALUES ( "00000000-0000-0000-0000-00000000001e","ba5eda7a-def5-0000-0000-000000000002",0,'' );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000002","00000000-0000-0000-0000-000000000002",'types','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000002","00000000-0000-0000-0000-000000000002",'ASL_Mapping','masl_domain',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'ASL_Mapping','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'Shared','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000100","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'types','',0 );
INSERT INTO EP_PKG VALUES ( "00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000002",'functions','',0 );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-0000000000fa" );
INSERT INTO S_EDT VALUES ( "00000000-0000-0000-0000-000000000102" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000fd",'TCA','',"00000000-0000-0000-0000-0000000000fa","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-0000000000fe",'CCA','',"00000000-0000-0000-0000-0000000000fa","00000000-0000-0000-0000-0000000000fd" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000105",'Richard','',"00000000-0000-0000-0000-000000000102","00000000-0000-0000-0000-000000000000" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000106",'John','',"00000000-0000-0000-0000-000000000102","00000000-0000-0000-0000-000000000105" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000107",'Mark','',"00000000-0000-0000-0000-000000000102","00000000-0000-0000-0000-000000000106" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000108",'Frank','',"00000000-0000-0000-0000-000000000102","00000000-0000-0000-0000-000000000107" );
INSERT INTO S_ENUM VALUES ( "00000000-0000-0000-0000-000000000109",'Goran','',"00000000-0000-0000-0000-000000000102","00000000-0000-0000-0000-000000000108" );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000011b","00000000-0000-0000-0000-000000000000",'basic_asl_enumeration',' This function test basic ASL operations on base types and
 enumerated types.
','# -------------------------------------------------------------------------------------------
#
# The ASL <switch> statement shall be supported
# 1103-0000-01-0411
#
# The ASL shall support user defined types
# 1103-0000-01-0312
#
# -------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------
# TEST 1 - Check to ensure that local variables are correctly assigned
# -------------------------------------------------------------------------------------------

   Test = Test_Start

   [] = RPT1:Start_Test[Test, "1103-0000-01-0311", "ASL Mapping", "Basic ASL DBSS",  "Local variable assignment"]

   Has_Failed = FALSE

   an_int = 1
   a_real = 2.3

   # Check that 32 characters can handled
   some_alpha_text   = "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF"
   lower_case_text   = "abcdefghijklmnopqrstuvwxyzabcdef"
   some_numeric_text = "12345678901234567890123456789012"

   # Check that all characters are permitted.
   an_asterisk    = "*"
   an_at          = "@"
   a_minus        = "-"
   an_equals      = "="
   a_plus         = "+"
   an_underscore  = "_"
   a_slash        = "/"
   a_question     = "?"
   a_fullstop     = "."
   a_comma        = ","
   an_ampersand   = "&"
   left_bracket   = "("
   right_bracket  = ")"

   a_colon        = ":"
   a_tilda        = "~"
   a_pipe         = "|"
   an_exclamation = "!"
   a_single_quote = "''"
   a_left_tick    = "`"
   a_power_operator       = "^"
   a_left_square_bracket  = "["
   a_rigt_square_bracket  = "]"
   a_left_curly_bracket   = "{"
   a_right_curley_bracket = "}"
   a_hash = "#"

   #{
     The following are not permitted : 

     a_backslash    = "\"
     a_percent      = "%"
     a_semi_colon   = ";"

   }#

   a_bool     = FALSE
   other_int  = an_int
   other_real = a_real
   other_text = some_alpha_text
   other_bool = a_bool

   if an_int = other_int then
 
      if a_real = other_real then

         if a_bool = other_bool then

            if some_alpha_text != other_text then
               Has_Failed   = TRUE
               Failure_Code = -10
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -20
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -30
      endif

   else
      Has_Failed   = TRUE
      Failure_Code = -40
   endif

   if Has_Failed then
      [] = RPT3:Test_Failed["Basic ASL", Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   endif

   Test = Test + 1

# End Test 1

# -------------------------------------------------------------------------------------------
# TEST 2 - Check that enumerated types are being used correctly
# -------------------------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "1103-0000-01-0312", "ASL Mapping", "Basic ASL DBSS", "Enumerated Types"]

   Has_Failed = FALSE

   an_enum of Enum = ''John''

   switch an_enum

      case ''John''
         Has_Failed = FALSE

      case ''Richard''
         Has_Failed   = TRUE
         Failure_Code = -10

      default
         Has_Failed   = TRUE
         Failure_Code = -20

   endswitch

   if Has_Failed then
      [] = RPT3:Test_Failed["Basic ASL", Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   endif

   Test = Test + 1

# End Test 2

# -------------------------------------------------------------------------------------------
# TEST 3 - Check that enumerated types are being used correctly
# -------------------------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "1103-0000-01-0312", "ASL Mapping", "Basic ASL DBSS", "Enumerated Types"]

   Has_Failed = FALSE

   an_enum of Enum = ''Richard''

   switch an_enum

      case ''John''
         Has_Failed   = TRUE
         Failure_Code = -10

      case ''Richard''
         Has_Failed = FALSE
   
      default
         Has_Failed   = TRUE
         Failure_Code = -20

   endswitch

   if Has_Failed then
      [] = RPT3:Test_Failed["Basic ASL", Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   endif

   Test = Test + 1
   
# End Test 3

# -------------------------------------------------------------------------------------------
# TEST 4 enumerated types
# -------------------------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "1103-0000-01-0312", "ASL Mapping", "Basic ASL DBSS", "Enumerated Types"]

   Has_Failed = FALSE

   an_enum of Enum = ''Goran''

   switch an_enum

      case ''John''
         Has_Failed   = TRUE
         Failure_Code = -10

      case ''Richard''
         Has_Failed   = TRUE
         Failure_Code = -20

      default
         Has_Failed = FALSE

   endswitch

   if Has_Failed then
      [] = RPT3:Test_Failed["Basic ASL", Test, Failure_Code]
   else
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   endif

   Test = Test + 1

# End Test 4

# -------------------------------------------------------------------------------------------
# Test 5 - Simple structure assignment
# -------------------------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "Null Requid", "ASL Mapping", "Basic ASL DBSS","Simple structure"]

   Has_Failed   = FALSE
   Failure_Code = -10

   {Simple_Structure} is Simple_Structure_Type

   Control_Integer      = 10
   Control_Real         = 10.0
   Control_String       = "Ten"
   Control_Boolean      = TRUE
   Control_Enum of Enum = ''Richard''

   Control_Instance_Handle = find-one Object_IF

   append [Control_Integer, Control_Real, Control_String, \ 
           Control_Boolean, Control_Enum] to \
           {Simple_Structure}

   # Perform a test when unpacking the structure.
   # Note that instance handles may not be compared.

   for [Local_Integer, Local_Real, Local_String, Local_Boolean, Local_Enum] in {Simple_Structure} do

      if Local_Integer = Control_Integer then 

         if Local_Real = Control_Real    then

            if Local_String = Control_String  then

               if Local_Boolean = Control_Boolean then

                  if Local_Enum != Control_Enum    then
                     Has_Failed   = TRUE
                     Failure_Code = -10
                  endif

               else
                  Has_Failed   = TRUE
                  Failure_Code = -20
               endif

            else
               Has_Failed   = TRUE
               Failure_Code = -30
            endif

         else
            Has_Failed   = TRUE
            Failure_Code = -40
         endif

      else
         Has_Failed   = TRUE
         Failure_Code = -50
      endif

   endfor
   
   if not Has_Failed then
      [] = RPT2:Test_Passed["Simple structure", Test,  0]
   else
      [] = RPT3:Test_Failed["Simple_Structure", Test, Failure_Code]
   endif

   Test = Test + 1

# End Test 5

#-------------------------------------------------------------------------------

Final_Test = Test
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000128","00000000-0000-0000-0000-000000000000",'basic_asl_divide_by_zero','','# -------------------------------------------------------------------------------------------
#
# The following operators shall be supported: +, -, /, *, ^, unary - 
# 1103-0000-01-0814
#
# -------------------------------------------------------------------------------------------

   Test = Test_Start

   [Host] = WAW1:What_Env[]

# -------------------------------------------------------------------------------------------
# TEST 1 - Integer divide by zero tests
# -------------------------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "Basic ASL DBSS", "Divide by integer zero"]

   int_zero      = 0
   an_int_value  = 10
   an_int_result = 0

   if Host = "WACA" then
      Supported = TRUE
      an_int_result = (an_int_value / int_zero)
   else
      Supported = FALSE
   endif

   # The result of a divide by zero is the result is set to ''last.
   # Since this is target dependant, a check for non-zero is the easiest option.

   if Supported = TRUE then

      if an_int_result != int_zero then 
         [] = RPT2:Test_Passed["Basic ASL", Test, 0]
      else
         [] = RPT3:Test_Failed["Basic ASL", Test, -10]
      endif

   else
      [] = RPT4:Test_Unsupported[Test]
   endif

   Test = Test + 1

# End Test 1

# -------------------------------------------------------------------------------------------
# TEST 2 - Integer divide by zero tests
# -------------------------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "Basic ASL DBSS", "Negative divide by integer zero"]

   int_zero      = 0
   an_int_value  = -10
   an_int_result = 0

   if Host = "WACA" then
      Supported = TRUE
      an_int_result = (an_int_value / int_zero)
   else
      Supported = FALSE
   endif

   # The result of a divide by zero is the result is set to ''last.
   # Since this is target dependant, a check for non-zero is the easiest option.

   if Supported = TRUE then

      if an_int_result != int_zero then 
         [] = RPT2:Test_Passed["Basic ASL", Test, 0]
      else
         [] = RPT3:Test_Failed["Basic ASL", Test, -10]
      endif

   else
      [] = RPT4:Test_Unsupported[Test]
   endif

   Test = Test + 1

# End Test 2

# -------------------------------------------------------------------------------------------
# TEST 3 - Integer divide by zero tests
# -------------------------------------------------------------------------------------------      

   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "Basic ASL DBSS", "Zero divided by integer zero"]

   int_zero      = 0
   an_int_value  = 0
   an_int_result = 0

   if Host = "WACA" then
      Supported = TRUE
      an_int_result = (an_int_value / int_zero)
   else
      Supported = FALSE
   endif

   if Supported = TRUE then

      if an_int_result = int_zero then 
         [] = RPT2:Test_Passed["Basic ASL", Test, 0]
      else
         [] = RPT3:Test_Failed["Basic ASL", Test, -10]
      endif

   else
      [] = RPT4:Test_Unsupported [Test]
   endif  

   Test = Test + 1

# End Test 3

# -------------------------------------------------------------------------------------------
# TEST 4 - Real divide by zero tests
# -------------------------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "Basic ASL DBSS", "Divide by real zero"]
   
   real_zero        = 0.0
   a_real_value     = 10.0
   a_real_result    = 0.0

   if Host = "WACA" then
      Supported = TRUE
      a_real_result = (a_real_value / real_zero)
   else
      Supported = FALSE
   endif

   if Supported = TRUE then

      if a_real_result != real_zero then 
         [] = RPT2:Test_Passed["Basic ASL", Test, 0]
      else
         [] = RPT3:Test_Failed["Basic ASL", Test, -10]
      endif

   else
      [] = RPT4:Test_Unsupported[Test]
   endif

   Test = Test + 1

# End Test 4

# -------------------------------------------------------------------------------------------
# TEST 5 - Real divide by zero tests
# -------------------------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "basic asl DBSS", "Negative divide by real zero"]

   real_zero        = 0.0
   a_real_value     = -10.0
   a_real_result    = 0.0

   if Host = "WACA" then
      Supported = TRUE
      a_real_result = (a_real_value / real_zero)
   else
      Supported = FALSE
   endif

   if Supported = TRUE then

      if a_real_result != real_zero then 
         [] = RPT2:Test_Passed["Basic ASL", Test, 0]
      else
         [] = RPT3:Test_Failed["Basic ASL", Test, -10]
      endif

   else
      [] = RPT4:Test_Unsupported[Test]
   endif

   Test = Test + 1

# End Test 5

# -------------------------------------------------------------------------------------------
# TEST 6 - Real divide by zero tests
# -------------------------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "1103-0000-01-0814", "ASL Mapping", "Basic ASL DBSS", "Zero divided by real zero"]

   real_zero        = 0.0
   a_real_value     = 0.0
   a_real_result    = 0.0

   if Host = "WACA" then
      Supported = TRUE
      a_real_result = (a_real_value / real_zero)
   else
      Supported = FALSE
   endif

   if Supported = TRUE then

      if a_real_result = real_zero then 
         [] = RPT2:Test_Passed["Basic ASL", Test, 0]
      else
         [] = RPT3:Test_Failed["Basic ASL", Test, -10]
      endif

   else
      [] = RPT4:Test_Unsupported[Test]
   endif

   Test = Test + 1

# End Test 6

# ------------------------------------------------------------------------------

Final_Test = Test
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000130","00000000-0000-0000-0000-000000000000",'Create_Report_Data','','# Find out of there already is one of these.
# It is not inconceivable that a report object still exists from a previous run.
# Report objects are not deleted at the end of a run, as certain events may
# still be en-queued.

old_report = find-one Report_Data

if old_report != UNDEFINED then
   delete old_report
endif

My_Report = create unique Report_Data with Reported_Domain_Number = 0

[] = RPT6:Domain_Test_Start["ASL Mapping"]
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000134","00000000-0000-0000-0000-000000000000",'Delete_Report_Data','','[] = RPT7:Domain_Test_Finished["ASL Mapping"]

# Do not delete the Report_Data object, as there may be still events in
# the queue.',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000138","00000000-0000-0000-0000-000000000000",'Test_Unfeasibly_Large_Object','','# -----------------------------------------------------------------------------------
# These series of test are to exmaine what happens when an object is larger than 
# would reasonably be expected is created. Further test show what happens when 
# said object is manipulated in various forms.
# These tests could be spread into a variety of domains, eg. find-and-sets, 
# function-calls and others. But since creating such a big object is a pain, all 
# these tests shall reside here for the big object.
# -----------------------------------------------------------------------------------

# -----------------------------------------------------------------------------------
# Test 1 - Create the unfeasibly large object and see what may be done with it.
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[Start_Test_Number, "1103-0000-01-0511", "ASL Mapping", "BIG Object", "Create big object"]

   Unfeasibly_Large_Object = create BIG_Object with One          = Start_Test_Number &\
                                                    Two          = Start_Test_Number &\
                                                    Three        = Start_Test_Number &\
                                                    Four         = Start_Test_Number &\
                                                    Five         = Start_Test_Number &\
                                                    Six          = Start_Test_Number &\
                                                    Seven        = Start_Test_Number &\
                                                    Eight        = Start_Test_Number &\
                                                    Nine         = Start_Test_Number &\
                                                    Ten          = Start_Test_Number &\
                                                    Eleven       = Start_Test_Number &\
                                                    Twelve       = Start_Test_Number &\
                                                    Thirteen     = Start_Test_Number &\
                                                    Fourteen     = Start_Test_Number &\
                                                    Fifteen      = Start_Test_Number &\
                                                    Sixteen      = Start_Test_Number &\
                                                    Eighteen     = Start_Test_Number &\
                                                    Nineteen     = Start_Test_Number &\
                                                    Twenty       = Start_Test_Number &\
                                                    Twentyone    = Start_Test_Number &\
                                                    Twentytwo    = Start_Test_Number &\
                                                    Twentythree  = Start_Test_Number &\
                                                    Twentyfour   = Start_Test_Number &\
                                                    Twentyfive   = Start_Test_Number &\
                                                    Twentysix    = Start_Test_Number &\
                                                    Twentyseven  = Start_Test_Number &\
                                                    Twentyeight  = Start_Test_Number &\
                                                    Twentynine   = Start_Test_Number &\
                                                    Thirty       = Start_Test_Number &\
                                                    Thirtyone    = Start_Test_Number &\
                                                    Thirtytwo    = Start_Test_Number &\
                                                    Thirtythree  = Start_Test_Number &\
                                                    Thirtyfour   = Start_Test_Number &\
                                                    Thirtyfive   = Start_Test_Number &\
                                                    Thirtysix    = Start_Test_Number &\
                                                    Thirtyseven  = Start_Test_Number &\
                                                    Thirtyeight  = Start_Test_Number &\
                                                    Thirtynine   = Start_Test_Number &\
                                                    Forty        = Start_Test_Number &\
                                                    Fortyone     = Start_Test_Number &\
                                                    Fortytwo     = Start_Test_Number &\
                                                    Fortythree   = Start_Test_Number &\
                                                    Fortyfour    = Start_Test_Number &\
                                                    Fortyfive    = Start_Test_Number &\
                                                    Fortysix     = Start_Test_Number &\
                                                    Fortyseven   = Start_Test_Number &\
                                                    Fortyeight   = Start_Test_Number &\
                                                    Fortynine    = Start_Test_Number &\
                                                    Fifty        = Start_Test_Number &\
                                                    Fiftyone     = Start_Test_Number &\
                                                    Fiftytwo     = Start_Test_Number &\
                                                    Fiftythree   = Start_Test_Number &\
                                                    Fiftyfour    = Start_Test_Number &\
                                                    Fiftyfive    = Start_Test_Number &\
                                                    Fiftysix     = Start_Test_Number &\
                                                    Fiftyseven   = Start_Test_Number &\
                                                    Fiftyeight   = Start_Test_Number &\
                                                    Fiftynine    = Start_Test_Number &\
                                                    Sixty        = Start_Test_Number &\
                                                    Sixtyone     = Start_Test_Number &\
                                                    Sixtytwo     = Start_Test_Number &\
                                                    Sixtythree   = Start_Test_Number &\
                                                    Sixtyfour    = Start_Test_Number &\
                                                    Sixtyfive    = Start_Test_Number &\
                                                    Sixtysix     = Start_Test_Number &\
                                                    Sixtyseven   = Start_Test_Number &\
                                                    Sixtyeight   = Start_Test_Number &\
                                                    Sixtynine    = Start_Test_Number &\
                                                    Seventy      = Start_Test_Number &\
                                                    Seventyone   = Start_Test_Number &\
                                                    Seventytwo   = Start_Test_Number &\
                                                    Seventythree = Start_Test_Number &\
                                                    Seventyfour  = Start_Test_Number &\
                                                    Seventyfive  = Start_Test_Number &\
                                                    Seventysix   = Start_Test_Number &\
                                                    Seventyseven = Start_Test_Number &\
                                                    Seventyeight = Start_Test_Number &\
                                                    Seventynine  = Start_Test_Number &\
                                                    Eighty       = Start_Test_Number &\
                                                    Eightyone    = Start_Test_Number &\
                                                    Eightytwo    = Start_Test_Number &\
                                                    Eightythree  = Start_Test_Number &\
                                                    Eightyfour   = Start_Test_Number &\
                                                    Current_State = ''Idle_State''

   if Unfeasibly_Large_Object != UNDEFINED then
      [] = RPT2:Test_Passed["Create Big Object", Start_Test_Number, 0]
   else
      [] = RPT3:Test_Failed["Create Big Object", Start_Test_Number, -10]
   endif

   This_Test_Number = Start_Test_Number + 1

# End Test 1

# -----------------------------------------------------------------------------------
# Test 2 - Check to see that the attributes can be read from
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0522", "ASL Mapping", "BIG Object", "Examine big object"]

   if Unfeasibly_Large_Object != UNDEFINED then

      if Unfeasibly_Large_Object.One        = Start_Test_Number &\
         Unfeasibly_Large_Object.Fortytwo   = Start_Test_Number &\
         Unfeasibly_Large_Object.Eightyfour = Start_Test_Number then

         [] = RPT2:Test_Passed["Examine Big Object", This_Test_Number, 0]
      else
         [] = RPT3:Test_Failed["Examine Big Object", This_Test_Number, -20]
      endif

   else
      [] = RPT3:Test_Failed["Examine Big Object", This_Test_Number, -10]
   endif

   This_Test_Number = This_Test_Number + 1

# End Test 2

# -----------------------------------------------------------------------------------
# Test 3 - Perform find-one on large object
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0544", "ASL Mapping", "BIG Object", "Find-one big object"]

   found_one_large_object = find-one BIG_Object

   if found_one_large_object != UNDEFINED then
      [] = RPT2:Test_Passed["Find-One Big Object", This_Test_Number, 0]
   else
      [] = RPT3:Test_Failed["Find-One Big Object", This_Test_Number, -10]
   endif

   This_Test_Number = This_Test_Number + 1

# End Test 3

# -----------------------------------------------------------------------------------
# Test 4 - Check to see that the attributes can be read from
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0522", "ASL Mapping", "BIG Object", "Examine found-one object"]

   if found_one_large_object != UNDEFINED then

      if found_one_large_object.One        = Start_Test_Number &\
         found_one_large_object.Fortytwo   = Start_Test_Number &\
         found_one_large_object.Eightyfour = Start_Test_Number then

         [] = RPT2:Test_Passed["Examine Big Object", This_Test_Number, 0]
      else
         [] = RPT3:Test_Failed["Examine Big Object", This_Test_Number, -20]
      endif

   else
      [] = RPT3:Test_Failed["Examine Big Object", This_Test_Number, -10]
   endif

   This_Test_Number = This_Test_Number + 1

# End Test 4

# -----------------------------------------------------------------------------------
# Test 5 - Perform find-one <object> where <boolean condition> on large object
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0545", "ASL Mapping", "BIG Object", "Find-one where fully specifying big object"]

   found_one_where_large_object = find-one BIG_Object where One          = Start_Test_Number &\
                                                            Two          = Start_Test_Number &\
                                                            Three        = Start_Test_Number &\
                                                            Four         = Start_Test_Number &\
                                                            Five         = Start_Test_Number &\
                                                            Six          = Start_Test_Number &\
                                                            Seven        = Start_Test_Number &\
                                                            Eight        = Start_Test_Number &\
                                                            Nine         = Start_Test_Number &\
                                                            Ten          = Start_Test_Number &\
                                                            Eleven       = Start_Test_Number &\
                                                            Twelve       = Start_Test_Number &\
                                                            Thirteen     = Start_Test_Number &\
                                                            Fourteen     = Start_Test_Number &\
                                                            Fifteen      = Start_Test_Number &\
                                                            Sixteen      = Start_Test_Number &\
                                                            Eighteen     = Start_Test_Number &\
                                                            Nineteen     = Start_Test_Number &\
                                                            Twenty       = Start_Test_Number &\
                                                            Twentyone    = Start_Test_Number &\
                                                            Twentytwo    = Start_Test_Number &\
                                                            Twentythree  = Start_Test_Number &\
                                                            Twentyfour   = Start_Test_Number &\
                                                            Twentyfive   = Start_Test_Number &\
                                                            Twentysix    = Start_Test_Number &\
                                                            Twentyseven  = Start_Test_Number &\
                                                            Twentyeight  = Start_Test_Number &\
                                                            Twentynine   = Start_Test_Number &\
                                                            Thirty       = Start_Test_Number &\
                                                            Thirtyone    = Start_Test_Number &\
                                                            Thirtytwo    = Start_Test_Number &\
                                                            Thirtythree  = Start_Test_Number &\
                                                            Thirtyfour   = Start_Test_Number &\
                                                            Thirtyfive   = Start_Test_Number &\
                                                            Thirtysix    = Start_Test_Number &\
                                                            Thirtyseven  = Start_Test_Number &\
                                                            Thirtyeight  = Start_Test_Number &\
                                                            Thirtynine   = Start_Test_Number &\
                                                            Forty        = Start_Test_Number 
    
                                                            #Fortyone     = Start_Test_Number &\
                                                            #Fortytwo     = Start_Test_Number &\
                                                            #Fortythree   = Start_Test_Number &\
                                                            #Fortyfour    = Start_Test_Number &\
                                                            #Fortyfive    = Start_Test_Number &\
                                                            #Fortysix     = Start_Test_Number &\
                                                            #Fortyseven   = Start_Test_Number &\
                                                            #Fortyeight   = Start_Test_Number &\
                                                            #Fortynine    = Start_Test_Number &\
                                                            #Fifty        = Start_Test_Number &\ 
                                                            #Fiftyone     = Start_Test_Number &\
                                                            #Fiftytwo     = Start_Test_Number &\
                                                            #Fiftythree   = Start_Test_Number &\
                                                            #Fiftyfour    = Start_Test_Number &\
                                                            #Fiftyfive    = Start_Test_Number &\
                                                            #Fiftysix     = Start_Test_Number &\
                                                            #Fiftyseven   = Start_Test_Number &\
                                                            #Fiftyeight   = Start_Test_Number &\
                                                            #Fiftynine    = Start_Test_Number &\
                                                            #Sixty        = Start_Test_Number &\
                                                            #Sixtyone     = Start_Test_Number &\
                                                            #Sixtytwo     = Start_Test_Number &\
                                                            #Sixtythree   = Start_Test_Number &\
                                                            #Sixtyfour    = Start_Test_Number &\
                                                            #Sixtyfive    = Start_Test_Number &\
                                                            #Sixtysix     = Start_Test_Number &\
                                                            #Sixtyseven   = Start_Test_Number &\
                                                            #Sixtyeight   = Start_Test_Number &\
                                                            #Sixtynine    = Start_Test_Number &\
                                                            #Seventy      = Start_Test_Number &\
                                                            #Seventyone   = Start_Test_Number &\
                                                            #Seventytwo   = Start_Test_Number &\
                                                            #Seventythree = Start_Test_Number &\
                                                            #Seventyfour  = Start_Test_Number &\
                                                            #Seventyfive  = Start_Test_Number &\ 
                                                            #Seventysix   = Start_Test_Number &\
                                                            #Seventyseven = Start_Test_Number &\
                                                            #Seventyeight = Start_Test_Number &\
                                                            #Seventynine  = Start_Test_Number &\
                                                            #Eighty       = Start_Test_Number &\
                                                            #Eightyone    = Start_Test_Number &\
                                                            #Eightytwo    = Start_Test_Number &\
                                                            #Eightythree  = Start_Test_Number &\
                                                            #Eightyfour   = Start_Test_Number
   
   if found_one_where_large_object != UNDEFINED then
      [] = RPT2:Test_Passed["Find One Where Object", This_Test_Number, 0]
   else
      [] = RPT3:Test_Failed["Find One Where Object", This_Test_Number, -10]
  endif

   This_Test_Number = This_Test_Number + 1

# End Test 5

# -----------------------------------------------------------------------------------
# Test 6 - Check to see that the attributes can be read from
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0522", "ASL Mapping", "BIG Object", "Examine found-one where object"]

   if found_one_where_large_object != UNDEFINED then

      if found_one_where_large_object.One        = Start_Test_Number &\
         found_one_where_large_object.Fortytwo   = Start_Test_Number &\
         found_one_where_large_object.Eightyfour = Start_Test_Number then

         [] = RPT2:Test_Passed["Examine Found One Where Object", This_Test_Number, 0]
      else
         [] = RPT3:Test_Failed["Examine found one where object", This_Test_Number, -20]
      endif
 
   else
      [] = RPT3:Test_Failed["Examine found one where object", This_Test_Number, -10]
   endif

   This_Test_Number = This_Test_Number + 1

# End Test 6

# -----------------------------------------------------------------------------------
# Test 7 - Perform find-only on large object
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0545", "ASL Mapping", "BIG object", "Find-only big object"]

   found_only_large_object = find-only BIG_Object

   if found_only_large_object != UNDEFINED then
      [] = RPT2:Test_Passed["find-only big object", This_Test_Number, 0]
   else
      [] = RPT3:Test_Failed["find-only big object", This_Test_Number, -1]
   endif

   This_Test_Number = This_Test_Number + 1

# End Test 7

# -----------------------------------------------------------------------------------
# Test 8 - Check to see that the attributes can be read from
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0522", "ASL Mapping", "BIG Object", "Examine found-only object"]

   if found_only_large_object != UNDEFINED then

      if found_only_large_object.One        = Start_Test_Number &\
         found_only_large_object.Fortytwo   = Start_Test_Number &\
         found_only_large_object.Eightyfour = Start_Test_Number then

         [] = RPT2:Test_Passed["Examine Find-Only Object", This_Test_Number, 0]
      else
         [] = RPT3:Test_Failed["Examine Find-Only Object", This_Test_Number, -20]
      endif

   else
      [] = RPT3:Test_Failed["Examine Find-Only Object", This_Test_Number, -10]
   endif

   This_Test_Number = This_Test_Number + 1

# End Test 8

# -----------------------------------------------------------------------------------
# Test 9 - Perform find-only <object> where <boolean condition> on large object
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0547", "ASL Mapping", "BIG object", "Find-only where fully specifying big object"]

   #One = Start_Test_Number &\
   #Two = Start_Test_Number &\
   #Three = Start_Test_Number &\
   #Four = Start_Test_Number &\
   #Five = Start_Test_Number &\
   #Six = Start_Test_Number &\
   #Seven = Start_Test_Number &\
   #Eight = Start_Test_Number &\
   #Nine = Start_Test_Number &\
   #Ten = Start_Test_Number &\
   #Eleven = Start_Test_Number &\
   #Twelve = Start_Test_Number &\
   #Thirteen = Start_Test_Number &\
   #Fourteen = Start_Test_Number &\
   #Fifteen = Start_Test_Number &\
   #Sixteen = Start_Test_Number &\
   #Eighteen = Start_Test_Number &\
   #Nineteen = Start_Test_Number &\
   #Twenty = Start_Test_Number &\
   #Twentyone = Start_Test_Number &\
   #Twentytwo = Start_Test_Number &\
   #Twentythree = Start_Test_Number &\
   #Twentyfour = Start_Test_Number &\
   #Twentyfive = Start_Test_Number &\
   #Twentysix = Start_Test_Number &\
   #Twentyseven = Start_Test_Number &\
   #Twentyeight = Start_Test_Number &\
   #Twentynine = Start_Test_Number &\
   #Thirty = Start_Test_Number &\
   #Thirtyone = Start_Test_Number &\
   #Thirtytwo = Start_Test_Number &\
   #Thirtythree = Start_Test_Number &\
   #Thirtyfour = Start_Test_Number &\
   #Thirtyfive = Start_Test_Number &\
   #Thirtysix = Start_Test_Number &\
   #Thirtyseven = Start_Test_Number &\
   #Thirtyeight = Start_Test_Number &\
   #Thirtynine = Start_Test_Number &\

   found_only_where_large_object = find-only BIG_Object where Forty        = Start_Test_Number &\
                                                              Fortyone     = Start_Test_Number &\
                                                              Fortytwo     = Start_Test_Number &\
                                                              Fortythree   = Start_Test_Number &\
                                                              Fortyfour    = Start_Test_Number &\
                                                              Fortyfive    = Start_Test_Number &\
                                                              Fortysix     = Start_Test_Number &\
                                                              Fortyseven   = Start_Test_Number &\ 
                                                              Fortyeight   = Start_Test_Number &\
                                                              Fortynine    = Start_Test_Number &\
                                                              Fifty        = Start_Test_Number &\
                                                              Fiftyone     = Start_Test_Number &\
                                                              Fiftytwo     = Start_Test_Number &\
                                                              Fiftythree   = Start_Test_Number &\
                                                              Fiftyfour    = Start_Test_Number &\
                                                              Fiftyfive    = Start_Test_Number &\
                                                              Fiftysix     = Start_Test_Number &\
                                                              Fiftyseven   = Start_Test_Number &\
                                                              Fiftyeight   = Start_Test_Number &\
                                                              Fiftynine    = Start_Test_Number &\ 
                                                              Sixty        = Start_Test_Number &\ 
                                                              Sixtyone     = Start_Test_Number &\
                                                              Sixtytwo     = Start_Test_Number &\ 
                                                              Sixtythree   = Start_Test_Number &\
                                                              Sixtyfour    = Start_Test_Number &\
                                                              Sixtyfive    = Start_Test_Number &\
                                                              Sixtysix     = Start_Test_Number &\
                                                              Sixtyseven   = Start_Test_Number &\
                                                              Sixtyeight   = Start_Test_Number &\
                                                              Sixtynine    = Start_Test_Number &\
                                                              Seventy      = Start_Test_Number &\
                                                              Seventyone   = Start_Test_Number &\
                                                              Seventytwo   = Start_Test_Number &\
                                                              Seventythree = Start_Test_Number &\
                                                              Seventyfour  = Start_Test_Number &\
                                                              Seventyfive  = Start_Test_Number &\
                                                              Seventysix   = Start_Test_Number &\
                                                              Seventyseven = Start_Test_Number &\
                                                              Seventyeight = Start_Test_Number &\
                                                              Seventynine  = Start_Test_Number &\
                                                              Eighty       = Start_Test_Number &\  
                                                              Eightyone    = Start_Test_Number &\
                                                              Eightytwo    = Start_Test_Number &\
                                                              Eightythree  = Start_Test_Number &\
                                                              Eightyfour   = Start_Test_Number
  
   if found_only_where_large_object != UNDEFINED then
      [] = RPT2:Test_Passed["Find Only Where Object", This_Test_Number, 0]
   else
      [] = RPT3:Test_Failed["Find Only Where Object", This_Test_Number, -10]
   endif

   This_Test_Number = This_Test_Number + 1

#  End Test 9

# -----------------------------------------------------------------------------------
# Test 10 - Check to see that the attributes can be read from
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0522", "ASL Mapping", "BIG Object", "Examine found-only where object"]

   if found_only_where_large_object != UNDEFINED then

      if found_only_where_large_object.One        = Start_Test_Number &\
         found_only_where_large_object.Fortytwo   = Start_Test_Number &\
         found_only_where_large_object.Eightyfour = Start_Test_Number then

         [] = RPT2:Test_Passed["Examine Found Only Where Object", This_Test_Number, 0]
      else
         [] = RPT3:Test_Failed["Examine found only where object", This_Test_Number, -20]
      endif

   else
      [] = RPT3:Test_Failed["Examine found only where object", This_Test_Number, -10]
   endif

   This_Test_Number = This_Test_Number + 1

# End Test 10

# -----------------------------------------------------------------------------------
# Test 11 - {set} = find <object> where <boolean condition>
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0541", "ASL Mapping", "BIG Object", "Find set where object"]

   {big_set} = find BIG_Object where One          = Start_Test_Number &\
                                     Two          = Start_Test_Number &\
                                     Three        = Start_Test_Number &\
                                     Four         = Start_Test_Number &\
                                     Five         = Start_Test_Number &\
                                     Six          = Start_Test_Number &\
                                     Seven        = Start_Test_Number &\
                                     Eight        = Start_Test_Number &\
                                     Nine         = Start_Test_Number &\
                                     Ten          = Start_Test_Number &\
                                     Eleven       = Start_Test_Number &\
                                     Twelve       = Start_Test_Number &\
                                     Thirteen     = Start_Test_Number &\
                                     Fourteen     = Start_Test_Number &\ 
                                     Fifteen      = Start_Test_Number &\
                                     Sixteen      = Start_Test_Number &\
                                     Eighteen     = Start_Test_Number &\
                                     Nineteen     = Start_Test_Number &\
                                     Twenty       = Start_Test_Number &\
                                     Forty        = Start_Test_Number &\
                                     Fortyone     = Start_Test_Number &\
                                     Fortytwo     = Start_Test_Number &\
                                     Fortythree   = Start_Test_Number &\
                                     Fortyfour    = Start_Test_Number &\
                                     Fortyfive    = Start_Test_Number &\
                                     Fortysix     = Start_Test_Number &\
                                     Fortyseven   = Start_Test_Number &\
                                     Fortyeight   = Start_Test_Number &\
                                     Fortynine    = Start_Test_Number &\
                                     Fifty        = Start_Test_Number &\
                                     Fiftyone     = Start_Test_Number &\
                                     Fiftytwo     = Start_Test_Number &\
                                     Fiftythree   = Start_Test_Number &\
                                     Fiftyfour    = Start_Test_Number &\
                                     Fiftyfive    = Start_Test_Number &\
                                     Fiftysix     = Start_Test_Number &\
                                     Fiftyseven   = Start_Test_Number &\
                                     Fiftyeight   = Start_Test_Number &\
                                     Fiftynine    = Start_Test_Number &\ 
                                     Eighty       = Start_Test_Number &\
                                     Eightyone    = Start_Test_Number &\
                                     Eightytwo    = Start_Test_Number &\
                                     Eightythree  = Start_Test_Number &\
                                     Eightyfour   = Start_Test_Number
  
                                     #Twentyone    = Start_Test_Number &\
                                     #Twentytwo    = Start_Test_Number &\
                                     #Twentythree  = Start_Test_Number &\
                                     #Twentyfour   = Start_Test_Number &\
                                     #Twentyfive   = Start_Test_Number &\
                                     #Twentysix    = Start_Test_Number &\
                                     #Twentyseven  = Start_Test_Number &\
                                     #Twentyeight  = Start_Test_Number &\
                                     #Twentynine   = Start_Test_Number &\
                                     #Thirty       = Start_Test_Number &\
                                     #Thirtyone    = Start_Test_Number &\
                                     #Thirtytwo    = Start_Test_Number &\
                                     #Thirtythree  = Start_Test_Number &\
                                     #Thirtyfour   = Start_Test_Number &\
                                     #Thirtyfive   = Start_Test_Number &\
                                     #Thirtysix    = Start_Test_Number &\
                                     #Thirtyseven  = Start_Test_Number &\
                                     #Thirtyeight  = Start_Test_Number &\
                                     #Thirtynine   = Start_Test_Number &\

                                     #Sixty        = Start_Test_Number &\
                                     #Sixtyone     = Start_Test_Number &\
                                     #Sixtytwo     = Start_Test_Number &\
                                     #Sixtythree   = Start_Test_Number &\
                                     #Sixtyfour    = Start_Test_Number &\
                                     #Sixtyfive    = Start_Test_Number &\
                                     #Sixtysix     = Start_Test_Number &\
                                     #Sixtyseven   = Start_Test_Number &\
                                     #Sixtyeight   = Start_Test_Number &\
                                     #Sixtynine    = Start_Test_Number &\
                                     #Seventy      = Start_Test_Number &\
                                     #Seventyone   = Start_Test_Number &\
                                     #Seventytwo   = Start_Test_Number &\
                                     #Seventythree = Start_Test_Number &\
                                     #Seventyfour  = Start_Test_Number &\
                                     #Seventyfive  = Start_Test_Number &\
                                     #Seventysix   = Start_Test_Number &\
                                     #Seventyseven = Start_Test_Number &\
                                     #Seventyeight = Start_Test_Number &\
                                     #Seventynine  = Start_Test_Number &\
 
   if countof {big_set} = 1 then
      [] = RPT2:Test_Passed["Find Set Of Big Object", This_Test_Number, 0]
   else
      [] = RPT3:Test_Failed["Find Set Of Big Object", This_Test_Number, -10]
   endif

   This_Test_Number = This_Test_Number + 1

# End Test 11

# -----------------------------------------------------------------------------------
# Test 12 - Check to see that the attributes can be read from each in the set
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0522", "ASL Mapping", "BIG Object", "Examine found-only where object"]

   for found_only_where_set_large_object in {big_set} do

      if found_only_where_set_large_object != UNDEFINED then

         if found_only_where_set_large_object.One        = Start_Test_Number &\
            found_only_where_set_large_object.Fortytwo   = Start_Test_Number &\
            found_only_where_set_large_object.Eightyfour = Start_Test_Number then

            [] = RPT2:Test_Passed["Examine Found Only Where Object", This_Test_Number, 0]
         else
            [] = RPT3:Test_Failed["Examine Found Only Where Object", This_Test_Number, -20]
         endif

      else
         [] = RPT3:Test_Failed["Examine Found Only Where Object", This_Test_Number, -10]
      endif
 
   endfor

   This_Test_Number = This_Test_Number + 1

# End Test 12

# -----------------------------------------------------------------------------------
# Test 13 - find-all <object>
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0543", "ASL Mapping", "BIG Object", "Find-all set where object"]

   {all_big_set} = find-all BIG_Object 

   if countof {all_big_set} = 1 then
      [] = RPT2:Test_Passed["Find-All Set Of Big Object", This_Test_Number, 0]
   else
      [] = RPT3:Test_Failed["Find-All Set Of Big Object", This_Test_Number, -10]
   endif

   This_Test_Number = This_Test_Number + 1

# End Test 13

# -----------------------------------------------------------------------------------
# Test 14 - Check to see that the attributes can be read from each in the set
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0522", "ASL Mapping", "BIG Object", "Examine found-all object"]

   for found_all_set_large_object in {all_big_set} do

      if found_all_set_large_object != UNDEFINED then

         if found_all_set_large_object.One        = Start_Test_Number &\
            found_all_set_large_object.Fortytwo   = Start_Test_Number &\
            found_all_set_large_object.Eightyfour = Start_Test_Number then

            [] = RPT2:Test_Passed["Examine Found All Object", This_Test_Number, 0]
         else
            [] = RPT3:Test_Failed["Examine Found All Object", This_Test_Number, -20]
         endif

      else
         [] = RPT3:Test_Failed["Examine Found All Object", This_Test_Number, -10]
      endif
 
    endfor

   This_Test_Number = This_Test_Number + 1

# End Test 14

# -----------------------------------------------------------------------------------
# Test 15 - Check to see that the large object may be passed as a parameter into a 
#           domain based synch service
# -----------------------------------------------------------------------------------

   [] = objBIG1:Receive_Unfeasonableness[Unfeasibly_Large_Object, This_Test_Number, Start_Test_Number]

   This_Test_Number = This_Test_Number + 1

# End Test 15

# -----------------------------------------------------------------------------------
# Test 16 - Create the unfeasibly large object and see what may be done with it
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0511", "ASL Mapping", "BIG Object", "Create big active object"]

   # Stash this number for later use when this object is decoded.
   Expected_Number = This_Test_Number

   Active_Unfeasibly_Large_Object = create BIG_Object with One          = This_Test_Number &\
                                                           Two          = This_Test_Number &\
                                                           Three        = This_Test_Number &\
                                                           Four         = This_Test_Number &\
                                                           Five         = This_Test_Number &\
                                                           Six          = This_Test_Number &\
                                                           Seven        = This_Test_Number &\ 
                                                           Eight        = This_Test_Number &\
                                                           Nine         = This_Test_Number &\
                                                           Ten          = This_Test_Number &\ 
                                                           Eleven       = This_Test_Number &\
                                                           Twelve       = This_Test_Number &\
                                                           Thirteen     = This_Test_Number &\
                                                           Fourteen     = This_Test_Number &\
                                                           Fifteen      = This_Test_Number &\
                                                           Sixteen      = This_Test_Number &\
                                                           Eighteen     = This_Test_Number &\
                                                           Nineteen     = This_Test_Number &\
                                                           Twenty       = This_Test_Number &\
                                                           Twentyone    = This_Test_Number &\
                                                           Twentytwo    = This_Test_Number &\
                                                           Twentythree  = This_Test_Number &\
                                                           Twentyfour   = This_Test_Number &\
                                                           Twentyfive   = This_Test_Number &\
                                                           Twentysix    = This_Test_Number &\ 
                                                           Twentyseven  = This_Test_Number &\
                                                           Twentyeight  = This_Test_Number &\
                                                           Twentynine   = This_Test_Number &\
                                                           Thirty       = This_Test_Number &\
                                                           Thirtyone    = This_Test_Number &\
                                                           Thirtytwo    = This_Test_Number &\
                                                           Thirtythree  = This_Test_Number &\
                                                           Thirtyfour   = This_Test_Number &\
                                                           Thirtyfive   = This_Test_Number &\
                                                           Thirtysix    = This_Test_Number &\
                                                           Thirtyseven  = This_Test_Number &\
                                                           Thirtyeight  = This_Test_Number &\
                                                           Thirtynine   = This_Test_Number &\
                                                           Forty        = This_Test_Number &\
                                                           Fortyone     = This_Test_Number &\
                                                           Fortytwo     = This_Test_Number &\
                                                           Fortythree   = This_Test_Number &\
                                                           Fortyfour    = This_Test_Number &\
                                                           Fortyfive    = This_Test_Number &\
                                                           Fortysix     = This_Test_Number &\
                                                           Fortyseven   = This_Test_Number &\
                                                           Fortyeight   = This_Test_Number &\
                                                           Fortynine    = This_Test_Number &\
                                                           Fifty        = This_Test_Number &\
                                                           Fiftyone     = This_Test_Number &\
                                                           Fiftytwo     = This_Test_Number &\
                                                           Fiftythree   = This_Test_Number &\
                                                           Fiftyfour    = This_Test_Number &\
                                                           Fiftyfive    = This_Test_Number &\
                                                           Fiftysix     = This_Test_Number &\
                                                           Fiftyseven   = This_Test_Number &\
                                                           Fiftyeight   = This_Test_Number &\
                                                           Fiftynine    = This_Test_Number &\
                                                           Sixty        = This_Test_Number &\
                                                           Sixtyone     = This_Test_Number &\
                                                           Sixtytwo     = This_Test_Number &\
                                                           Sixtythree   = This_Test_Number &\
                                                           Sixtyfour    = This_Test_Number &\
                                                           Sixtyfive    = This_Test_Number &\
                                                           Sixtysix     = This_Test_Number &\
                                                           Sixtyseven   = This_Test_Number &\
                                                           Sixtyeight   = This_Test_Number &\
                                                           Sixtynine    = This_Test_Number &\
                                                           Seventy      = This_Test_Number &\
                                                           Seventyone   = This_Test_Number &\
                                                           Seventytwo   = This_Test_Number &\
                                                           Seventythree = This_Test_Number &\
                                                           Seventyfour  = This_Test_Number &\
                                                           Seventyfive  = This_Test_Number &\
                                                           Seventysix   = This_Test_Number &\
                                                           Seventyseven = This_Test_Number &\
                                                           Seventyeight = This_Test_Number &\
                                                           Seventynine  = This_Test_Number &\
                                                           Eighty       = This_Test_Number &\
                                                           Eightyone    = This_Test_Number &\
                                                           Eightytwo    = This_Test_Number &\
                                                           Eightythree  = This_Test_Number &\
                                                           Eightyfour   = This_Test_Number &\
                                                           Current_State = ''Idle_State''

   if Active_Unfeasibly_Large_Object != UNDEFINED then
      [] = RPT2:Test_Passed["create Big Active Object", This_Test_Number, 0]
   else
      [] = RPT3:Test_Failed["create Big Active Object", This_Test_Number, -10]
   endif

   This_Test_Number = This_Test_Number + 1

# End Test 16

# -----------------------------------------------------------------------------------
# Test 17 - There are two separate tests performed by that last generate statement, 
#           so increment the counter accordingly
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "1103-0000-01-0511", "ASL Mapping", "BIG object", "Delete big active object"]
   [] = RPT8:Specify_Requid[This_Test_Number, "1103-0000-01-0531"]

   Doomed_Unfeasibly_Large_Object = create BIG_Object with One          = This_Test_Number &\
                                                           Two          = This_Test_Number &\
                                                           Three        = This_Test_Number &\
                                                           Four         = This_Test_Number &\
                                                           Five         = This_Test_Number &\
                                                           Six          = This_Test_Number &\
                                                           Seven        = This_Test_Number &\
                                                           Eight        = This_Test_Number &\
                                                           Nine         = This_Test_Number &\
                                                           Ten          = This_Test_Number &\
                                                           Eleven       = This_Test_Number &\
                                                           Twelve       = This_Test_Number &\
                                                           Thirteen     = This_Test_Number &\
                                                           Fourteen     = This_Test_Number &\
                                                           Fifteen      = This_Test_Number &\
                                                           Sixteen      = This_Test_Number &\
                                                           Eighteen     = This_Test_Number &\
                                                           Nineteen     = This_Test_Number &\
                                                           Twenty       = This_Test_Number &\
                                                           Twentyone    = This_Test_Number &\
                                                           Twentytwo    = This_Test_Number &\
                                                           Twentythree  = This_Test_Number &\
                                                           Twentyfour   = This_Test_Number &\
                                                           Twentyfive   = This_Test_Number &\
                                                           Twentysix    = This_Test_Number &\
                                                           Twentyseven  = This_Test_Number &\
                                                           Twentyeight  = This_Test_Number &\
                                                           Twentynine   = This_Test_Number &\
                                                           Thirty       = This_Test_Number &\
                                                           Thirtyone    = This_Test_Number &\
                                                           Thirtytwo    = This_Test_Number &\
                                                           Thirtythree  = This_Test_Number &\
                                                           Thirtyfour   = This_Test_Number &\
                                                           Thirtyfive   = This_Test_Number &\
                                                           Thirtysix    = This_Test_Number &\
                                                           Thirtyseven  = This_Test_Number &\
                                                           Thirtyeight  = This_Test_Number &\
                                                           Thirtynine   = This_Test_Number &\
                                                           Forty        = This_Test_Number &\
                                                           Fortyone     = This_Test_Number &\
                                                           Fortytwo     = This_Test_Number &\
                                                           Fortythree   = This_Test_Number &\
                                                           Fortyfour    = This_Test_Number &\
                                                           Fortyfive    = This_Test_Number &\
                                                           Fortysix     = This_Test_Number &\
                                                           Fortyseven   = This_Test_Number &\
                                                           Fortyeight   = This_Test_Number &\
                                                           Fortynine    = This_Test_Number &\
                                                           Fifty        = This_Test_Number &\
                                                           Fiftyone     = This_Test_Number &\
                                                           Fiftytwo     = This_Test_Number &\
                                                           Fiftythree   = This_Test_Number &\
                                                           Fiftyfour    = This_Test_Number &\
                                                           Fiftyfive    = This_Test_Number &\
                                                           Fiftysix     = This_Test_Number &\
                                                           Fiftyseven   = This_Test_Number &\
                                                           Fiftyeight   = This_Test_Number &\
                                                           Fiftynine    = This_Test_Number &\
                                                           Sixty        = This_Test_Number &\
                                                           Sixtyone     = This_Test_Number &\
                                                           Sixtytwo     = This_Test_Number &\
                                                           Sixtythree   = This_Test_Number &\
                                                           Sixtyfour    = This_Test_Number &\
                                                           Sixtyfive    = This_Test_Number &\
                                                           Sixtysix     = This_Test_Number &\
                                                           Sixtyseven   = This_Test_Number &\
                                                           Sixtyeight   = This_Test_Number &\
                                                           Sixtynine    = This_Test_Number &\
                                                           Seventy      = This_Test_Number &\
                                                           Seventyone   = This_Test_Number &\
                                                           Seventytwo   = This_Test_Number &\
                                                           Seventythree = This_Test_Number &\
                                                           Seventyfour  = This_Test_Number &\
                                                           Seventyfive  = This_Test_Number &\
                                                           Seventysix   = This_Test_Number &\
                                                           Seventyseven = This_Test_Number &\
                                                           Seventyeight = This_Test_Number &\
                                                           Seventynine  = This_Test_Number &\
                                                           Eighty       = This_Test_Number &\
                                                           Eightyone    = This_Test_Number &\
                                                           Eightytwo    = This_Test_Number &\
                                                           Eightythree  = This_Test_Number &\
                                                           Eightyfour   = This_Test_Number &\
                                                           Current_State = ''Idle_State''
  
   delete Doomed_Unfeasibly_Large_Object

   if Doomed_Unfeasibly_Large_Object = UNDEFINED then
      [] = RPT2:Test_Passed["Delete Big Active Object", This_Test_Number, 0]
   else
      [] = RPT3:Test_Failed["Delete Big Active Object", This_Test_Number, -10]
   endif

   This_Test_Number = This_Test_Number + 1

# End Test 17

# -----------------------------------------------------------------------------------
# Test 18 - 
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "Null Requid", "ASL Mapping", "BIG object", "NULL"]
   [] = RPT2:Test_Passed["NULL", This_Test_Number, 0]

   This_Test_Number = This_Test_Number + 1

# End Test 18

# -----------------------------------------------------------------------------------
# Test 19 - 
# -----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "Null Requid", "ASL Mapping", "BIG object", "NULL2"]
   [] = RPT2:Test_Passed["NULL2", This_Test_Number  , 0]

   This_Test_Number = This_Test_Number + 1

# End Test 19

# -----------------------------------------------------------------------------------
# Test 20 -
# -----------------------------------------------------------------------------------

   generate objBIG1:Have_A_Biggie (Unfeasibly_Large_Object, This_Test_Number, Expected_Number) to Active_Unfeasibly_Large_Object

   This_Test_Number = This_Test_Number + 1

# End Test 20

# -----------------------------------------------------------------------------------
# Test 21 -
# -----------------------------------------------------------------------------------

   # generate to send the object into termination state.
   # This will only work if the events generated following the transition out of ''IDLE_STATE'' have been processed first.

   # generate objBIG2:To_Complete() to Active_Unfeasibly_Large_Object

# -----------------------------------------------------------------------------------

Finish_Test_Number = This_Test_Number

',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000140","00000000-0000-0000-0000-000000000000",'Test_Large_Numbers','','This_Test_Number = Start_Test_Number

[Host] = WAW1:What_Env[]
if Host = "WACA" then
   WACA = TRUE
else
   WACA = FALSE
endif

# Commented out code indicates that these ASL instructions will cause the WACA not to generate this file,
# as an assingment of an out of range value will result in a Fatal Error during code generation.

# It is conceivable that WACA could be required to actually limit the maximum and minimum values
# to be within the correct range. This does NOT happen currently. If this changes, and WACA is
# required to limit any range, the commented out code should be re-instated.

# Maximum permissable value
System_Maximum = 2147483647

# Minimum permissable value
System_Minimum = -2147483648

#Illegal maximum value
#Overflow_System_Maximum = 2147483648
Overflow_System_Maximum = System_Maximum

# Illegal minimum value
#Underflow_System_Minimum = -2147483649
Underflow_System_Minimum = System_Minimum


# ------------------------------------------------------------------------------------------------------------
# Test 1 - Integer Overflow Underflow
# ------------------------------------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "Null Requid", "ASL Mapping", "Integer Overflow Underflow", "Test max"]

   if System_Maximum = 2147483647 then
      [] = RPT2:Test_Passed["Integer max", This_Test_Number, System_Maximum]
   else
      [] = RPT3:Test_Failed["Integer max", This_Test_Number, System_Maximum]
   endif

   This_Test_Number = This_Test_Number + 1

# End Test 1

# ------------------------------------------------------------------------------------------------------------
# Test 2 - Integer Overflow Underflow
# ------------------------------------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "Null Requid", "ASL Mapping", "Integer Overflow Underflow", "Test min"]

   if System_Minimum = -2147483648 then
      [] = RPT2:Test_Passed["Integer max", This_Test_Number, System_Minimum]
   else
      [] = RPT3:Test_Failed["Integer max", This_Test_Number, System_Minimum]
   endif
 
   This_Test_Number = This_Test_Number + 1

# End Test 2

# ------------------------------------------------------------------------------------------------------------
# Test 3 - Integer Overflow Underflow
# ------------------------------------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "Null Requid", "ASL Mapping", "Integer Overflow Underflow", "Test constrained to max"]

   # WACA should limit the Overflow_System_Maximum value to the system defined max, 
   # since this value is outside of the defined integer range.

   # Compare it to the unmodified maximum legal value System_Maximum

   # if WACA then

   if Overflow_System_Maximum = System_Maximum then
      [] = RPT2:Test_Passed["Integer constrained to max", This_Test_Number, Overflow_System_Maximum]
   else
      [] = RPT3:Test_Failed["Integer constrained to max", This_Test_Number, Overflow_System_Maximum]
   endif

   # else
      # ISIM does no limiting, and allows a bigger range anyway.
      # If this bit ever got tested by WACA (and it shouldn''t), this test would pass as both the
      # operands would have been modified by WACA during code generation. This will be proved later.
   #   if Overflow_System_Maximum = 2147483648 then
   #      [] = RPT2:Test_Passed["Integer constrained to max", This_Test_Number, Overflow_System_Maximum]
   #   else
   #      [] = RPT3:Test_Failed["Integer constrained to max", This_Test_Number, Overflow_System_Maximum]
   #   endif

   #endif

   This_Test_Number = This_Test_Number + 1

# End Test 3

# ------------------------------------------------------------------------------------------------------------
# Test 4 - Integer Overflow Underflow
# ------------------------------------------------------------------------------------------------------------

   [] = RPT1:Start_Test[This_Test_Number, "Null Requid", "ASL Mapping", "Integer Overflow Underflow", "Test constrained to min"]

   # WACA should limit this value to the system defined min, since this value is outside of the defined integer range.

   # if WACA then
      if Underflow_System_Minimum = System_Minimum then
         [] = RPT2:Test_Passed["Integer constrained to min", This_Test_Number, Underflow_System_Minimum]
      else
         [] = RPT3:Test_Failed["Integer constrained to min", This_Test_Number, Underflow_System_Minimum]
      endif

   # else
      # ISIM does no limiting, and allows a bigger range anyway.
   #   if Underflow_System_Minimum = -2147483649 then
   #      [] = RPT2:Test_Passed["Integer constrained to min", This_Test_Number, Underflow_System_Minimum]
   #   else
   #      [] = RPT3:Test_Failed["Integer constrained to min", This_Test_Number, Underflow_System_Minimum]
   #   endif

   #endif

   This_Test_Number = This_Test_Number + 1

# End Test 4

# ------------------------------------------------------------------------------------------------------------

Finish_Test_Number = This_Test_Number
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000148","00000000-0000-0000-0000-000000000000",'Perform_Attribute_Assignment','','#-----------------------------------------------------------------------
# The ASL <create ... with> statment to create an instance of an object
# with attributes shall be supported
# 1103-0000-0511
#
# Writing to object attributes shall be supported
# 1103-0000-01-0521
#
# Reading object attribute values shall be supported
# 1103-0000-01-0522
#-----------------------------------------------------------------------

This_Test = Test_Start

[] = RPT1:Start_Test[This_Test, "1103-0000-01-0511", "ASL_Mapping", "Passive Domain Service Perform Attribute assignment", "Assign all attributes"]
[] = RPT8:Specify_Requid[This_Test, "1103-0000-01-0521"]
[] = RPT8:Specify_Requid[This_Test, "1103-0000-01-0522"]

my_object = create Object_LOGIC with IntegerAttr = This_Test &\
    TextAttr = "Hello" &\
    BooleanAttr = FALSE &\
    EnumerationAttr = ''Frank'' &\
    ReferenceLOGIC = This_Test 

my_object = find-one Object_LOGIC where ReferenceLOGIC = This_Test

Failure_Code = 1

if my_object != UNDEFINED then

   if my_object.TextAttr = "Hello" then

      if my_object.BooleanAttr = FALSE then

         if my_object.EnumerationAttr = ''Frank'' then

            Failure_Code = 0
   
         else

            Failure_Code = -40

         endif

      else

         Failure_Code = -30

      endif

   else

      Failure_Code = -20

   endif

   delete my_object

else

   Failure_Code = -10

endif

if Failure_Code = 0 then
   [] = RPT2:Test_Passed["Attribute read", This_Test, Failure_Code]
else
   [] = RPT3:Test_Failed["Attribute read", This_Test, Failure_Code]
endif

This_Test = This_Test + 1

Final_Test = This_Test
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000150","00000000-0000-0000-0000-000000000000",'Create_Processor','','#-----------------------------------------------------------------------
# The ASL timer function <Create_Timer> shall be supported
# 1103-0000-01-1111
#
# The ASL <create ... with> statment to create an instance of an object
# with attributes shall be supported
# 1103-0000-0511
#
# Writing to object attributes shall be supported
# 1103-0000-01-0521
#
# Reading object attribute values shall be supported
# 1103-0000-01-0522
#-----------------------------------------------------------------------

This_Test = Test_Start

[] = RPT1:Start_Test[This_Test, "1103-0000-01-0511", "ASL_Mapping", "Active Domain Service Perform Attribute assignment", "Assign all attributes"]
[] = RPT8:Specify_Requid[This_Test, "1103-0000-01-1111"]
[] = RPT8:Specify_Requid[This_Test, "1103-0000-01-0521"]
[] = RPT8:Specify_Requid[This_Test, "1103-0000-01-0522"]

[my_timer_id_local] = Create_Timer[]

my_processor = create Processor with Processor_Id = Processor_Id_Local &\
   Background_Processing_Timer_Id = my_timer_id_local &\
   Communications_Enabled = FALSE 

my_object = find-one Processor where Processor_Id = Processor_Id_Local

Failure_Code = 1

if my_object != UNDEFINED then

   if my_object.Background_Processing_Timer_Id = my_timer_id_local then

      if my_object.Communications_Enabled = FALSE then

         Failure_Code = 0

      else

         Failure_Code = -30

      endif

   else

      Failure_Code = -20

   endif

   delete my_object

else

   Failure_Code = -10

endif

if Failure_Code = 0 then
   [] = RPT2:Test_Passed["Attribute read", This_Test, Failure_Code]
else
   [] = RPT3:Test_Failed["Attribute read", This_Test, Failure_Code]
endif

This_Test = This_Test + 1

Final_Test = This_Test',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000015a","00000000-0000-0000-0000-000000000000",'Check_Parameters','','#--------------------------------------------------
# Check parameter ordering
#--------------------------------------------------       

   The_Result = 0

   [] = RPT1:Start_Test[Test, "Null Requid", "ASL Mapping", "Basic ASL DBSS","Check parameter ordering"]

   The_Result = Test - The_Subtract_Param

   if The_Result >= 0 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

Returning_No = Test + 1',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000164","00000000-0000-0000-0000-000000000000",'Check_Base_Types','','#------------------------------------------------------------------
# The architecture should be able to support Real, Integer, Boolean
# and Text base types. This test assigns appropriates values to 
# variables and then reads them back to make sure that these values
# have been correctly assigned
#------------------------------------------------------------------

   Local_Test = Test

   The_Real_Type    = 23.12345
   The_Integer_Type = 12345
   The_String_Type  = "The Cat Sat On The Mat"
   The_Boolean_Type = TRUE

   objDV = create Default_Vals with The_Integer     = 0     &\
                                    The_Real        = 0.0   &\
                                    The_Text        = " "    &\
                                    The_Boolean     = FALSE

   objDV.The_Real    = The_Real_Type
   objDV.The_Integer = The_Integer_Type
   objDV.The_Text    = The_String_Type
   objDV.The_Boolean = The_Boolean_Type

   [] = RPT1:Start_Test[Local_Test, "1241-0000-01-0105", "ASL Mapping", "Check Base types", "Check that base types are correct"]
   [] = RPT8:Specify_Requid[Local_Test, "1241-0000-01-0106"]
   [] = RPT8:Specify_Requid[Local_Test, "1241-0000-01-0107"]
   [] = RPT8:Specify_Requid[Local_Test, "1241-0000-01-0110"]

   if objDV.The_Real = 23.12345 then

      if objDV.The_Integer = 12345 then

         if objDV.The_Text = "The Cat Sat On The Mat" then

            if objDV.The_Boolean then
               [] = RPT2:Test_Passed["Basic ASL", Local_Test, 0]
            else
               [] = RPT3:Test_Failed["Basic ASL", Local_Test, -10]
            endif

         else
            [] = RPT3:Test_Failed["Basic ASL", Local_Test, -30]
         endif

      else
         [] = RPT3:Test_Failed["Basic ASL", Local_Test, -40]
      endif

   else
      [] = RPT3:Test_Failed["Basic ASL", Local_Test, -50]
   endif

   Local_Test = Local_Test + 1

# End Test 1

#------------------------------------------------------------------
# Test 2 - Test the Time Of Day attribute
#------------------------------------------------------------------

   [] = RPT1:Start_Test[Local_Test, "1241-0000-01-0108", "ASL Mapping", "Check Base types", "Check Time Of Day Attribute"]
   [] = RPT5:Test_Text [Local_Test, "Time Of Day attribute is"]
   [] = RPT5:Test_Text [Local_Test, "unsupported by the WACA"]

   [] = RPT4:Test_Unsupported[Local_Test]

   Local_Test = Local_Test + 1

#------------------------------------------------------------------
# Test 3 - 
#------------------------------------------------------------------

   [] = RPT1:Start_Test[Local_Test, "Null Requid", "ASL Mapping", "Check Base types", "Check Attribute comparison"]

   instA = create ObjectA with The_Int1 = 1 & The_Int2 = 2
   instB = create ObjectB with The_IntB1 = 1 & The_IntB2 = 2

   if instA.The_Int1 = instB.The_IntB1 then
      [] = RPT2:Test_Passed["Comp", Local_Test, 0]
   else
      [] = RPT3:Test_Failed["Comp", Local_Test, -10]
   endif

   Local_Test = Local_Test + 1

#------------------------------------------------------------------
# Test 4 - 
#------------------------------------------------------------------

   [] = RPT1:Start_Test[Local_Test, "Null Requid", "ASL Mapping", "Check Base types", "Check Attribute comparison"]

   if instA.The_Int1 != instA.The_Int2 then
      [] = RPT2:Test_Passed["Comp", Local_Test, 0]
   else
      [] = RPT3:Test_Failed["Comp", Local_Test, -10]
   endif

   Local_Test = Local_Test + 1

#------------------------------------------------------------------
# Test 4 - 
#------------------------------------------------------------------

   [] = RPT1:Start_Test[Local_Test, "Null Requid", "ASL Mapping", "Check Base types", "Check Attribute comparison"]

   if instA.The_Int1 != instA.The_Int2 then
      [] = RPT2:Test_Passed["Comp", Local_Test, 0]
   else
      [] = RPT3:Test_Failed["Comp", Local_Test, -10]
   endif

   Local_Test = Local_Test + 1

#------------------------------------------------------------------
# Test 5 - 
#------------------------------------------------------------------

   [] = RPT1:Start_Test[Local_Test, "Null Requid", "ASL Mapping", "Check Base types", "Check Attribute comparison"]

   if instA.The_Int2 = instB.The_IntB2 then
      [] = RPT2:Test_Passed["Comp", Local_Test, 0]
   else
      [] = RPT3:Test_Failed["Comp", Local_Test, -10]
   endif

   Local_Test = Local_Test + 1

# End Test 2

Returning_No = Local_Test',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000016c","00000000-0000-0000-0000-000000000000",'Check_Defaults','','#----------------------------------------------------------------------------------
# Check that variables are set default values on initialisation
#----------------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "1103-0000-01-0311", "ASL Mapping", "Check Default Values","Check default values"]

   [] = RPT4:Test_Unsupported[Test]

   [Host] = WAW1:What_Env[]
   if Host = "ISIM" then
      Supported = FALSE
   else
      Supported = TRUE
   endif

   Set_Vals = FALSE

   if Set_Vals then

      if Supported then
         The_Real_Default = 1.0
         The_Integer_Default = 1
         The_Text_Default = "Goodbye"
         The_Boolean_Default = TRUE
      else
         The_Real_Default = 0.0
         The_Integer_Default = 0
         The_Text_Default = "Goodbye"
         The_Boolean_Default = TRUE
      endif

   endif

   if The_Real_Default = 1.0 then
 
      if The_Integer_Default = 1 then

         if The_Text_Default = "                                " then

            if not The_Boolean_Default then
              [] = RPT2:Test_Passed["Basic ASL", Test, 0]
            else
              [] = RPT3:Test_Failed["Basic ASL", Test, -10]
            endif

         else
            [] = RPT3:Test_Failed["Basic ASL", Test, -20]
         endif

      else
         [] = RPT3:Test_Failed["Basic ASL", Test, -30]
      endif

   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -40]
   endif

Returning_No = Test + 1',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000174","00000000-0000-0000-0000-000000000000",'And_Or_Checks','','#-------------------------------------------------------------------#
#
# Logical operators AND and OR within if statements
#
#
#
#
#
#
#
#
#
#
#
#
#
#-------------------------------------------------------------------#

Test = Test_No

#-------------------------------------------------------------------#
# Test 1 - Check if AND then with boolean values
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if AND then"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]

   Bool1 = TRUE
   Bool2 = TRUE

   if Bool1 and Bool2 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

   Test = Test + 1

# End Test 1

#-------------------------------------------------------------------#
# Test 2 - Check if AND then with integer values
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if AND then"]

   Val1 = 10
   Val2 = 20

   if Val1 = 10 and Val2 = 20 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

   Test = Test + 1

# End Test 2

#-------------------------------------------------------------------#
# Test 3 - Check if AND then with boolean values
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if AND then"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0912"]

   Bool1 = TRUE
   Bool2 = FALSE

   if Bool1 and not Bool2 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

   Test = Test + 1

# End Test 3

#-------------------------------------------------------------------#
# Test 4 - Check if AND then else with integer values
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if AND then"]

   Val1 = 10
   Val2 = 20

   if Val1 = 10 and Val2 = 10 then
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   else
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   endif

   Test = Test + 1

# End Test 5

#-------------------------------------------------------------------#
# Test 5 - Check if OR then with boolean values
#-------------------------------------------------------------------#

    [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if OR then"]
    [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]

    Bool1 = TRUE
    Bool2 = FALSE

    if Bool1 or Bool2 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

   Test = Test + 1

# End Test 5


#-------------------------------------------------------------------#
# Test 6 - Check if OR then with boolean values
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if OR then"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0912"]


   Bool1 = TRUE
   Bool2 = TRUE

   if Bool1 or Bool2 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

   Test = Test + 1

# End Test 6


#-------------------------------------------------------------------#
# Test 7 - Check if OR then with integer values
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if OR then"]

   Val1 = 10
   Val2 = 20

   if Val1 = 10 or Val2 = 10 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

   Test = Test + 1

# End Test 7

#-------------------------------------------------------------------#
# Test 8 - Check if OR then with integer values
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if OR then"]

   Val1 = 10
   Val2 = 20

   if Val1 = 20 or Val2 = 20 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

   Test = Test + 1

# End Test 8


#-------------------------------------------------------------------#
# Test 9 - Check if OR then else with boolean values
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if OR then"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]

   Bool1 = FALSE
   Bool2 = FALSE

   if Bool1 or Bool2 then
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   else
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   endif

   Test = Test + 1

# End Test 9

#-------------------------------------------------------------------#
# Test 10 - Check if & then with integer values
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if logical AND then"]

   Val1 = 10
   Val2 = 20

   if Val1 = 10 & Val2 = 20 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

   Test = Test + 1

# End Test 10


#-------------------------------------------------------------------#
# Test 11 - Check if & then with boolean values
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if logical AND then"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0912"]

   Bool1 = TRUE
   Bool2 = FALSE

   if Bool1 & not Bool2 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

   Test = Test + 1

# End Test 11

#-------------------------------------------------------------------#
# Test 12 - Check if & then else with boolean values
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if logical AND then"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]

   Bool1 = FALSE
   Bool2 = FALSE

   if Bool1 & Bool2 then
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   else
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   endif

   Test = Test + 1

# End Test 12

#-------------------------------------------------------------------#
# Test 13 - Check if | then with integer values
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if logical OR then"]

   Val1 = 10
   Val2 = 20

   if Val1 = 10 | Val2 = 10 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

   Test = Test + 1

# End Test 13

#-------------------------------------------------------------------#
# Test 14 - Check if & then else with boolean values
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if logical AND then"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0912"]

   Bool1 = TRUE
   Bool2 = FALSE

   if not Bool1 & Bool2 then
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]     
   else
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   endif

   Test = Test + 1

# End Test 14

#-------------------------------------------------------------------#
# Test 15 - Check if | then else with boolean values
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0913", "ASL Mapping", "Check AND and ORs in if statements", "Check if logical OR then"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0911"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-0912"]

   Bool1 = TRUE
   Bool2 = FALSE

   if not Bool1 | Bool2 then
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]     
   else
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   endif

   Test = Test + 1

# End Test 15

#-------------------------------------------------------------------#

Returning_No = Test
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000017c","00000000-0000-0000-0000-000000000000",'Comment_Checks','','#-------------------------------------------------------------------#
#
# Comment line checks
#
# Single and multiple line comments shall be supported
# 1103-0000-01-1511
#
#-------------------------------------------------------------------#

   Test = Test_No

#-------------------------------------------------------------------#
# Test 1 - Check that a single line of commented out ASL code is 
#          not translated
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-1511", "ASL Mapping", "Comment Checks", "Check single line comment"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0110"]

   Val1 = 10
   Val2 = 20
   
   # Val1 = Val2

   if Val1 = 10 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

   Test = Test + 1

# End Test 1

#-------------------------------------------------------------------#
# Test 2 - Check that multiple lines of commented out ASL code are 
#          not translated
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-1511", "ASL Mapping", "Comment Checks", "Check multi line comments"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0110"]
   Val1 = 10
   Val2 = 20

   #{
      Val1 = 30
      Val2 = 40

      Val1 = Val2

   }#

   if Val1 = 10 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

   Test = Test + 1
   
# End Test 2

#-------------------------------------------------------------------#
# Test 3 - This test ensures that if a hash on its own does not 
#           comment out the line following it
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Check single hash does not comment following line"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0110"]

   Count = 0

   #
   Count = Count + 1
      
   if Count = 1 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

   Test = Test + 1
   
# End Test 3

#-------------------------------------------------------------------#
# Test 4 - Check long comments
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "Null Requid", "Relationships", "objE", "Check long comments"]

   # This comment lins was long (DNS)
      
   [] = RPT2:Test_Passed["Basic ASL", Test, 0]

   Test = Test + 1
   
# End Test 4

Returning_No = Test
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-000000000184","00000000-0000-0000-0000-000000000000",'Check_Continuation','','#-------------------------------------------------------------------#
#
# Line Continuation character check
#
# The use of the line continuation ''\'' character placed at the end
# of a line to indicate that a following line is to be included as
# part of the same ASL statement shall be supported
# 1103-0000-01-0313
#
#-------------------------------------------------------------------#

   Test = Test_No

#-------------------------------------------------------------------#
# Test 1 - Check multi line statments
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0313", "ASL Mapping", "Comment Checks", "Check multi line statement"]

   Val1 = 10
   Val2 = 20
   
   Val1 = Val1 + \
          Val2

   if Val1 = 30 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

   Test = Test + 1

# End Test 1

#-------------------------------------------------------------------#
# Test 2 - Check multi line statments
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1103-0000-01-0313", "ASL Mapping", "Comment Checks", "Check multi line statement"]

   Val1 = 10
   Val2 = 20
   Val3 = 30

   Val1 = \
          Val1 +\ 
          Val2 + \
          Val3

   if Val1 = 60 then
      [] = RPT2:Test_Passed["Basic ASL", Test, 0]
   else
      [] = RPT3:Test_Failed["Basic ASL", Test, -10]
   endif

   Test = Test + 1
   
# End Test 2

Returning_No = Test
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-00000000018c","00000000-0000-0000-0000-000000000000",'Check_Identifiers','','   Test = Test_No

#-------------------------------------------------------------------#
# Test 1 - Check that identifying attributes are picked up
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0131", "ASL Mapping", "Check identifiers", "Check identifying attributes"]

   LeftObject  = create Left          with idL  = 1
   RightObject = create Right         with idR  = 1
   ARObject    = create Another_Right with idAR = 1
   LRObject    = create LeftRight     with idL  = 1 &\
                                           idR  = 1
   
   if LRObject.idL = 1 then

      if LRObject.idR = 1 then   
         [] = RPT2:Test_Passed["Identifying Attribute", Test, 0]
      else
         [] = RPT3:Test_Failed["Identifying Attribute", Test, -20]
      endif

   else
      [] = RPT3:Test_Failed["Identifying Attribute", Test, -10]
   endif

   Test = Test + 1

#-------------------------------------------------------------------#
# Test 2 - Check that non-identifying attributes are ignored
#          N.B. This test can only be confirmed by inspection
#-------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0131", "ASL Mapping", "Check identifiers", "Check identifying attributes"]
   [] = RPT5:Test_Text [Test, "Confirmed on inspection"]
   [] = RPT2:Test_Passed["Non-Identifying Attribute", Test, 0]

   Test = Test + 1

# End Test 2

Returning_No = Test',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000001d5","00000000-0000-0000-0000-000000000000",'Perform_ASL_Mapping_Tests',' Perform ASL Mapping Tests
','# ---------------------------------------------------------------------------
# Peform IF tests
# ---------------------------------------------------------------------------

   Start_Test_Value = 1

   [Start_Test_Value] = objIF1:do_if_test[Start_Test_Value]

# ---------------------------------------------------------------------------
# Perform FOR tests
# ---------------------------------------------------------------------------

   [Start_Test_Value] = objFOR1:do_for_test[Start_Test_Value]

# ---------------------------------------------------------------------------
# Perform LOOP tests
# Create several instance of the Object_LOOP
# ---------------------------------------------------------------------------

   temp = 1
   loop
      newLOOP = create Object_LOOP with ReferenceLOOP = temp &\
                                        ResultA       = 0 
      temp = temp + 1
      breakif temp > 5
   endloop

   # Invoke as an object based synch. serv.

   # Start verification
   an_instanceLOOP = find-one Object_LOOP

   [Start_Test_Value] = objLOOP1:do_loop_tests[an_instanceLOOP, Start_Test_Value] 

# ---------------------------------------------------------------------------
# Perform SWITCH tests
# ---------------------------------------------------------------------------

  temp = 1

   # Define ONE instance of Object_SWITCH
   newSWITCH = create Object_SWITCH with ReferenceSWITCH = temp &\
                                         IntegerAttr     = 1    &\
                                         ResultA         = 0

   # Define TWO instance of Object_SWITCH with IntegerAttr = 2
   loop
      newSWITCH = create Object_SWITCH with ReferenceSWITCH = temp &\
                                            IntegerAttr    = 2     &\
                                            ResultA        = 0
      temp = temp + 1
      breakif temp = 3
   endloop

   # Define THREE instance of Object_SWITCH with IntegerAttr = 3
   loop
      newSWITCH = create Object_SWITCH with ReferenceSWITCH = temp &\
                                            IntegerAttr     = 3    &\
                                            ResultA         = 0
      temp = temp + 1
      breakif temp = 6
   endloop

   # Define FOUR instance of Object_SWITCH with IntegerAttr = 4
   # During TEST1 these instances of Object_SWITCH should not be affected.
   loop
      newSWITCH = create Object_SWITCH with ReferenceSWITCH = temp &\
                                            IntegerAttr     = 4    &\
                                            ResultA         = 0
      temp = temp + 1
      breakif temp = 10
   endloop

   [Start_Test_Value] = objSWITCH1:do_switch[Start_Test_Value]

# ---------------------------------------------------------------------------
# Perform ARITHMETIC/LOGIC tests
# ---------------------------------------------------------------------------

   # Define ONE instance of Object_LOGIC

   # Date and Time attributes not supported by S/W architecture

   #                                    TimeAttr = 14:45:34         &\
   #                                    DateAttr = 1996.03.02       &\

   an_instanceLOGIC = create Object_LOGIC with ReferenceLOGIC  = 1              &\
                                               IntegerAttr     = 0              &\
                                               EnumerationAttr = ''Richard''      &\
                                               BooleanAttr     = TRUE           &\
                                               ResultA         = 0              &\
                                               TextAttr        = "Verification" &\
                                               RealAttr        = 0.0

   [Start_Test_Value] = objLOGIC1:do_arithmetic_and_logic[an_instanceLOGIC, Start_Test_Value]

# ---------------------------------------------------------------------------
# Check that attribute assignment happens correctly in an object service
# ---------------------------------------------------------------------------

   [Start_Test_Value] = objLOGIC2:Perform_Attribute_Assignment[Start_Test_Value]

# ---------------------------------------------------------------------------
# As above, but for an active object.
# ---------------------------------------------------------------------------

   [Start_Test_Value] = ASL_Mapping8::Create_Processor [Start_Test_Value,''CCA'']

# ---------------------------------------------------------------------------
# As above, but for an active object.
# ---------------------------------------------------------------------------

   [Start_Test_Value] = PROC1:Create_Processor [Start_Test_Value, ''TCA'']

# ---------------------------------------------------------------------------
# Perform NESTED tests
# ---------------------------------------------------------------------------

   # Create several instances of the Object_NESTED
   temp = 1
   loop
      newNESTED = create Object_NESTED  with ReferenceNESTED = temp &\
                                             ResultA         = 0    &\
                                             ResultB         = 0
      temp = temp + 1
      # Tests performed on these instances would have pushed
      # the final result out of range of defined base_integer_type
      # range of +- 2000. So reduce number of instances to 4.
      breakif temp > 5

   endloop

   [Start_Test_Value] = objNESTED1:do_nested_tests[Start_Test_Value]

# ---------------------------------------------------------------------------
# Perform NESTED IF tests
# ---------------------------------------------------------------------------

   # Nest IF statements, without logical conditions.
   an_instanceNESTED_IF = create Nested_IF with ReferenceNstIF = 1 &\
                                           ResultA             = 0 

   # Start the test
   [Start_Test_Value] = NstIF1:do_nested_if[an_instanceNESTED_IF, Start_Test_Value]

# ---------------------------------------------------------------------------
# Perform NESTED FOR tests
# ---------------------------------------------------------------------------

   # Nest FOR statements.

   Count = 1
   loop
      newNstFOR = create Nested_FOR with ReferenceNstFOR = Count &\
                                         ResultA         = 0 
      Count = Count + 1
      breakif Count = 6
   endloop

   # Start the test
   [Start_Test_Value] = NstFOR1:do_nested_for[Start_Test_Value] 

# ---------------------------------------------------------------------------
# Perform NESTED LOOP tests
# ---------------------------------------------------------------------------

   # Nest LOOP statements.

   an_instanceNESTED_LOOP = create Nested_LOOP with ReferenceNstLOOP = 1 & \
                                                    ResultA          = 0

   # Start the test
   [Start_Test_Value] = NstLOOP1:do_nested_loops[an_instanceNESTED_LOOP, Start_Test_Value]

# ---------------------------------------------------------------------------
# Perform BASIC ASL tests
# ---------------------------------------------------------------------------

   # basic ASL operations by function call

   # Start the test
   [Start_Test_Value] = ASL_Mapping1::basic_asl_enumeration[Start_Test_Value]


# ---------------------------------------------------------------------------
# Divide by zero tests
# ---------------------------------------------------------------------------

   [Start_Test_Value] = ASL_Mapping2::basic_asl_divide_by_zero[Start_Test_Value]

# ---------------------------------------------------------------------------
# Overflow underflow tests
# ---------------------------------------------------------------------------

   [Start_Test_Value] = ASL_Mapping6::Test_Large_Numbers[Start_Test_Value]

# ---------------------------------------------------------------------------
# Check that attribute assignment happens correctly in a domain service
# ---------------------------------------------------------------------------

   [Start_Test_Value] = ASL_Mapping7::Perform_Attribute_Assignment[Start_Test_Value]

# ---------------------------------------------------------------------------
# Peramater order tests
# ---------------------------------------------------------------------------

   A_Small_Number = 1
   [Start_Test_Value] = ASL_Mapping9::Check_Parameters[Start_Test_Value,A_Small_Number]

# ---------------------------------------------------------------------------
# Base types checks
# ---------------------------------------------------------------------------

   [Start_Test_Value] = ASL_Mapping10::Check_Base_Types[Start_Test_Value]

# ---------------------------------------------------------------------------
# Default values checks
# ---------------------------------------------------------------------------

   [Start_Test_Value] = ASL_Mapping11::Check_Defaults[Start_Test_Value]

# ---------------------------------------------------------------------------
# AND and OR checks
# ---------------------------------------------------------------------------

   [Start_Test_Value] = ASL_Mapping12::And_Or_Checks[Start_Test_Value]

# ---------------------------------------------------------------------------
#  Comment checks
# ---------------------------------------------------------------------------

   [Start_Test_Value] = ASL_Mapping13::Comment_Checks[Start_Test_Value]

# ---------------------------------------------------------------------------
# Statment continuation checks
# ---------------------------------------------------------------------------
 
   [Start_Test_Value] = ASL_Mapping14::Check_Continuation[Start_Test_Value]

# ---------------------------------------------------------------------------
# Attribute default values checks
# ---------------------------------------------------------------------------

   [Start_Test_Value] = DV1:Default_Vals_In_Object[Start_Test_Value]

# ---------------------------------------------------------------------------
# Test identifying and non-identifying attributes
# ---------------------------------------------------------------------------

   [Start_Test_Value] = ASL_Mapping15::Check_Identifiers[Start_Test_Value]

# ---------------------------------------------------------------------------
# Test that Native C inserts work correctly
# ---------------------------------------------------------------------------

   [] = RPT1:Start_Test[Start_Test_Value, "1103-0000-01-1211", "ASL Mapping", "Native inline code", "C Inline code"]
   [] = RPT8:Specify_Requid[Start_Test_Value, "1101-0000-01-0109"]

   [Host]= WAW1:What_Env[]

   Test_Var = 0

   $INLINE
      Test_Var = 100;
   $ENDINLINE   

   if Host = "ISIM" then

      if Test_Var = 100 then
         [] = RPT2:Test_Passed["C Inline code", Start_Test_Value, 0]
      else
         [] = RPT3:Test_Failed["C Inline code", Start_Test_Value, Test_Var]
      endif

   else

      if Test_Var = 0 then
         [] = RPT2:Test_Passed["C Inline code", Start_Test_Value, 0]
      else
         [] = RPT3:Test_Failed["C Inline code", Start_Test_Value, Test_Var]
      endif

   endif

   Start_Test_Value = Start_Test_Value + 1

# ---------------------------------------------------------------------------
# Test that native Ada code works correctly
# ---------------------------------------------------------------------------

   [] = RPT1:Start_Test[Start_Test_Value, "1103-0000-01-1212", "ASL Mapping", "Native inline code", "Ada Inline code"]
   [] = RPT8:Specify_Requid[Start_Test_Value, "1101-0000-01-0108"]

   Test_Var = 0

   #$ADA_INLINE
   #   Test_Var := 100;
   #$END_ADAINLINE

    if Host = "ISIM" then

      if Test_Var = 0 then
         [] = RPT2:Test_Passed["C Inline code", Start_Test_Value, 0]
      else
         [] = RPT3:Test_Failed["C Inline code", Start_Test_Value, Test_Var]
      endif

   else

      if Test_Var = 100 then
         [] = RPT2:Test_Passed["Ada Inline code", Start_Test_Value, 0]
      else
         [] = RPT3:Test_Failed["Ada Inline code", Start_Test_Value, Test_Var]
      endif

   endif

   Start_Test_Value = Start_Test_Value + 1

# ---------------------------------------------------------------------------
# Check that iteration over sets works correctly
# ---------------------------------------------------------------------------

   [] = RPT1:Start_Test[Start_Test_Value, "1241-0000-01-1201", "ASL Mapping", "ASL Support", "Iteration over a set"]

   objIf1  = create Object_IF with ReferenceIF = 100
   objIf2  = create Object_IF with ReferenceIF = 101
   objIf3  = create Object_IF with ReferenceIF = 102
   objIf4  = create Object_IF with ReferenceIF = 103
   objIf5  = create Object_IF with ReferenceIF = 104
   objIf6  = create Object_IF with ReferenceIF = 105
   objIf7  = create Object_IF with ReferenceIF = 106
   objIf8  = create Object_IF with ReferenceIF = 107
   objIf9  = create Object_IF with ReferenceIF = 108
   objIf10 = create Object_IF with ReferenceIF = 109

   {SetF} = find Object_IF where ReferenceIF >= 100

   Total = countof {SetF}
   Count = 0

   for InstF in {SetF} do
      Count = Count + 1
   endfor

   if Total = Count then
      [] = RPT2:Test_Passed["Iteration over set", Start_Test_Value, 0]
   else
      [] = RPT3:Test_Failed["Iteration over set", Start_Test_Value, Count]
   endif      

   Start_Test_Value = Start_Test_Value + 1

# ---------------------------------------------------------------------------
# Create unique - This is proved by inspecting the relevant WACA generated 
#                 code
# ---------------------------------------------------------------------------

   [] = RPT1:Start_Test[Start_Test_Value, "1241-0000-01-1213", "ASL Mapping", "ASL Support", "Create Unique"]
   [] = RPT5:Test_Text[Start_Test_Value, "Proved by inspection"]
   [] = RPT2:Test_Passed["Create_Unique", Start_Test_Value, 0]

   Start_Test_Value = Start_Test_Value + 1

# ---------------------------------------------------------------------------
# Perform tests on an unfeasibly large object
# ---------------------------------------------------------------------------

   [Start_Test_Value] = ASL_Mapping5::Test_Unfeasibly_Large_Object[Start_Test_Value]


',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000001d7","00000000-0000-0000-0000-000000000000",'Start_ASL_Mapping_Tests',' Start ASL Mapping Tests
','[] = ASL_Mapping3::Create_Report_Data[]
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SYNC VALUES ( "00000000-0000-0000-0000-0000000001d9","00000000-0000-0000-0000-000000000000",'Finish_ASL_Mapping_Tests',' Finish ASL Mapping Tests
','# [] = ASL_Mapping4::Delete_Report_Data[]
',"ba5eda7a-def5-0000-0000-000000000000",3,'',2 );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000123","00000000-0000-0000-0000-00000000011b",'Test_Start',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000125","00000000-0000-0000-0000-00000000011b",'Final_Test',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000123",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000012b","00000000-0000-0000-0000-000000000128",'Test_Start',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000012d","00000000-0000-0000-0000-000000000128",'Final_Test',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-00000000012b",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000013b","00000000-0000-0000-0000-000000000138",'Start_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000013d","00000000-0000-0000-0000-000000000138",'Finish_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-00000000013b",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000143","00000000-0000-0000-0000-000000000140",'Start_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000145","00000000-0000-0000-0000-000000000140",'Finish_Test_Number',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000143",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000014b","00000000-0000-0000-0000-000000000148",'Test_Start',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000014d","00000000-0000-0000-0000-000000000148",'Final_Test',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-00000000014b",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000153","00000000-0000-0000-0000-000000000150",'Test_Start',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000155","00000000-0000-0000-0000-000000000150",'Processor_Id_Local',"00000000-0000-0000-0000-0000000000fa",0,'',"00000000-0000-0000-0000-000000000153",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000157","00000000-0000-0000-0000-000000000150",'Final_Test',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000155",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000015d","00000000-0000-0000-0000-00000000015a",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000015f","00000000-0000-0000-0000-00000000015a",'The_Subtract_Param',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-00000000015d",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000161","00000000-0000-0000-0000-00000000015a",'Returning_No',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-00000000015f",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000167","00000000-0000-0000-0000-000000000164",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000169","00000000-0000-0000-0000-000000000164",'Returning_No',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000167",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000016f","00000000-0000-0000-0000-00000000016c",'Test',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000171","00000000-0000-0000-0000-00000000016c",'Returning_No',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-00000000016f",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000177","00000000-0000-0000-0000-000000000174",'Test_No',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000179","00000000-0000-0000-0000-000000000174",'Returning_No',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000177",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000017f","00000000-0000-0000-0000-00000000017c",'Test_No',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000181","00000000-0000-0000-0000-00000000017c",'Returning_No',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-00000000017f",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000187","00000000-0000-0000-0000-000000000184",'Test_No',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000189","00000000-0000-0000-0000-000000000184",'Returning_No',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-000000000187",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-00000000018f","00000000-0000-0000-0000-00000000018c",'Test_No',"ba5eda7a-def5-0000-0000-000000000002",0,'',"00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_SPARM VALUES ( "00000000-0000-0000-0000-000000000191","00000000-0000-0000-0000-00000000018c",'Returning_No',"ba5eda7a-def5-0000-0000-000000000002",1,'',"00000000-0000-0000-0000-00000000018f",'' );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-0000000001db",1,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_REL VALUES ( "00000000-0000-0000-0000-000000000200",2,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-0000000001db","00000000-0000-0000-0000-0000000001df","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000001db","00000000-0000-0000-0000-0000000001e8","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-0000000001db","00000000-0000-0000-0000-0000000001fb","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-000000000200","00000000-0000-0000-0000-000000000204","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_OIR VALUES ( "00000000-0000-0000-0000-0000000000ef","00000000-0000-0000-0000-000000000200","00000000-0000-0000-0000-00000000020d","00000000-0000-0000-0000-000000000000" );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-0000000001db","00000000-0000-0000-0000-0000000001df",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000001db","00000000-0000-0000-0000-0000000001e8",0 );
INSERT INTO R_RTO VALUES ( "00000000-0000-0000-0000-0000000000ef","00000000-0000-0000-0000-000000000200","00000000-0000-0000-0000-00000000020d",0 );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-0000000001db","00000000-0000-0000-0000-0000000001fb" );
INSERT INTO R_RGO VALUES ( "00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-000000000200","00000000-0000-0000-0000-000000000204" );
INSERT INTO R_SIMP VALUES ( "00000000-0000-0000-0000-000000000200" );
INSERT INTO R_PART VALUES ( "00000000-0000-0000-0000-0000000000ef","00000000-0000-0000-0000-000000000200","00000000-0000-0000-0000-00000000020d",0,0,'WARNING_undefined_role_name' );
INSERT INTO R_FORM VALUES ( "00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-000000000200","00000000-0000-0000-0000-000000000204",0,0,'WARNING_undefined_role_name' );
INSERT INTO R_ASSOC VALUES ( "00000000-0000-0000-0000-0000000001db" );
INSERT INTO R_AONE VALUES ( "00000000-0000-0000-0000-0000000000ce","00000000-0000-0000-0000-0000000001db","00000000-0000-0000-0000-0000000001df",0,0,'WARNING_undefined_role_name' );
INSERT INTO R_AOTH VALUES ( "00000000-0000-0000-0000-0000000000d9","00000000-0000-0000-0000-0000000001db","00000000-0000-0000-0000-0000000001e8",1,0,'WARNING_undefined_role_name' );
INSERT INTO R_ASSR VALUES ( "00000000-0000-0000-0000-0000000000e4","00000000-0000-0000-0000-0000000001db","00000000-0000-0000-0000-0000000001fb",0 );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000002d",0,"00000000-0000-0000-0000-000000000029" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000030",1,"00000000-0000-0000-0000-000000000029" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000038",0,"00000000-0000-0000-0000-000000000034" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000003b",1,"00000000-0000-0000-0000-000000000034" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000043",0,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000046",1,"00000000-0000-0000-0000-00000000003f" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000004e",0,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000051",1,"00000000-0000-0000-0000-00000000004a" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000059",0,"00000000-0000-0000-0000-000000000055" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000005c",1,"00000000-0000-0000-0000-000000000055" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000064",0,"00000000-0000-0000-0000-000000000060" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000067",1,"00000000-0000-0000-0000-000000000060" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000006f",0,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000072",1,"00000000-0000-0000-0000-00000000006b" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000007a",0,"00000000-0000-0000-0000-000000000076" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000007d",1,"00000000-0000-0000-0000-000000000076" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000085",0,"00000000-0000-0000-0000-000000000081" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000088",1,"00000000-0000-0000-0000-000000000081" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000090",0,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-000000000093",1,"00000000-0000-0000-0000-00000000008c" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000009b",0,"00000000-0000-0000-0000-000000000097" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-00000000009e",1,"00000000-0000-0000-0000-000000000097" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000a6",0,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000a9",1,"00000000-0000-0000-0000-0000000000a2" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000b1",0,"00000000-0000-0000-0000-0000000000ad" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000b4",1,"00000000-0000-0000-0000-0000000000ad" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000bc",0,"00000000-0000-0000-0000-0000000000b8" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000bf",1,"00000000-0000-0000-0000-0000000000b8" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000c7",0,"00000000-0000-0000-0000-0000000000c3" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000ca",1,"00000000-0000-0000-0000-0000000000c3" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000d2",0,"00000000-0000-0000-0000-0000000000ce" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000d5",1,"00000000-0000-0000-0000-0000000000ce" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000dd",0,"00000000-0000-0000-0000-0000000000d9" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000e0",1,"00000000-0000-0000-0000-0000000000d9" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000e8",0,"00000000-0000-0000-0000-0000000000e4" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000eb",1,"00000000-0000-0000-0000-0000000000e4" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000f3",0,"00000000-0000-0000-0000-0000000000ef" );
INSERT INTO S_IRDT VALUES ( "00000000-0000-0000-0000-0000000000f6",1,"00000000-0000-0000-0000-0000000000ef" );
INSERT INTO S_SDT VALUES ( "00000000-0000-0000-0000-00000000010b" );
INSERT INTO S_MBR VALUES ( "00000000-0000-0000-0000-00000000010e",'Simple_Int','',"00000000-0000-0000-0000-00000000010b","ba5eda7a-def5-0000-0000-000000000002","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO S_MBR VALUES ( "00000000-0000-0000-0000-000000000110",'Simple_Real','',"00000000-0000-0000-0000-00000000010b","ba5eda7a-def5-0000-0000-000000000003","00000000-0000-0000-0000-00000000010e",'' );
INSERT INTO S_MBR VALUES ( "00000000-0000-0000-0000-000000000112",'Simple_String','',"00000000-0000-0000-0000-00000000010b","ba5eda7a-def5-0000-0000-000000000004","00000000-0000-0000-0000-000000000110",'' );
INSERT INTO S_MBR VALUES ( "00000000-0000-0000-0000-000000000114",'Simple_Boolean','',"00000000-0000-0000-0000-00000000010b","ba5eda7a-def5-0000-0000-000000000001","00000000-0000-0000-0000-000000000112",'' );
INSERT INTO S_MBR VALUES ( "00000000-0000-0000-0000-000000000116",'Simple_Enum','',"00000000-0000-0000-0000-00000000010b","00000000-0000-0000-0000-000000000102","00000000-0000-0000-0000-000000000114",'' );
INSERT INTO C_C VALUES ( "00000000-0000-0000-0000-000000000023","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",'ASL_Mapping',' This domain deals with the basic ASL process modelling. It
 does not require the creation of instances, relationships or
 event mechanisms. It does require and use domain & object
 based functions.
',0,"00000000-0000-0000-0000-000000000000",0,'' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-00000000011d","00000000-0000-0000-0000-000000000000",'ASL_Mapping','' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-000000000000",'ASL_MappingReport_Result','' );
INSERT INTO C_I VALUES ( "00000000-0000-0000-0000-0000000001cb","00000000-0000-0000-0000-000000000000",'ASL_MappingWhere_Are_We','' );
INSERT INTO C_P VALUES ( "00000000-0000-0000-0000-00000000011f",'','Unnamed_Interface','','' );
INSERT INTO C_R VALUES ( "00000000-0000-0000-0000-000000000196",'',' Terminator stub for report domain
','Unnamed_Interface','' );
INSERT INTO C_R VALUES ( "00000000-0000-0000-0000-0000000001cd",'','','Unnamed_Interface','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000121","00000000-0000-0000-0000-00000000011d",0,'basic_asl_enumeration','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000129","00000000-0000-0000-0000-00000000011d",0,'basic_asl_divide_by_zero','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000131","00000000-0000-0000-0000-00000000011d",0,'Create_Report_Data','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000135","00000000-0000-0000-0000-00000000011d",0,'Delete_Report_Data','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000139","00000000-0000-0000-0000-00000000011d",0,'Test_Unfeasibly_Large_Object','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000141","00000000-0000-0000-0000-00000000011d",0,'Test_Large_Numbers','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-00000000011d",0,'Perform_Attribute_Assignment','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000151","00000000-0000-0000-0000-00000000011d",0,'Create_Processor','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000015b","00000000-0000-0000-0000-00000000011d",0,'Check_Parameters','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000165","00000000-0000-0000-0000-00000000011d",0,'Check_Base_Types','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000016d","00000000-0000-0000-0000-00000000011d",0,'Check_Defaults','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000175","00000000-0000-0000-0000-00000000011d",0,'And_Or_Checks','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000017d","00000000-0000-0000-0000-00000000011d",0,'Comment_Checks','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000185","00000000-0000-0000-0000-00000000011d",0,'Check_Continuation','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000018d","00000000-0000-0000-0000-00000000011d",0,'Check_Identifiers','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-000000000198","00000000-0000-0000-0000-000000000194",0,'Start_Test','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-00000000019f","00000000-0000-0000-0000-000000000194",0,'Test_Passed','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000001a4","00000000-0000-0000-0000-000000000194",0,'Test_Failed','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000001a9","00000000-0000-0000-0000-000000000194",0,'Test_Unsupported','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000001ac","00000000-0000-0000-0000-000000000194",0,'Test_Text','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000001b0","00000000-0000-0000-0000-000000000194",0,'Domain_Test_Start','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000001b3","00000000-0000-0000-0000-000000000194",0,'Domain_Test_Finished','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000001b6","00000000-0000-0000-0000-000000000194",0,'Specify_Requid','' );
INSERT INTO C_EP VALUES ( "00000000-0000-0000-0000-0000000001cf","00000000-0000-0000-0000-0000000001cb",0,'What_Env','' );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000121","ba5eda7a-def5-0000-0000-000000000000",'basic_asl_enumeration','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000129","ba5eda7a-def5-0000-0000-000000000000",'basic_asl_divide_by_zero','',0,'',"00000000-0000-0000-0000-000000000121" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000131","ba5eda7a-def5-0000-0000-000000000000",'Create_Report_Data','',0,'',"00000000-0000-0000-0000-000000000129" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000135","ba5eda7a-def5-0000-0000-000000000000",'Delete_Report_Data','',0,'',"00000000-0000-0000-0000-000000000131" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000139","ba5eda7a-def5-0000-0000-000000000000",'Test_Unfeasibly_Large_Object','',0,'',"00000000-0000-0000-0000-000000000135" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000141","ba5eda7a-def5-0000-0000-000000000000",'Test_Large_Numbers','',0,'',"00000000-0000-0000-0000-000000000139" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000149","ba5eda7a-def5-0000-0000-000000000000",'Perform_Attribute_Assignment','',0,'',"00000000-0000-0000-0000-000000000141" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000151","ba5eda7a-def5-0000-0000-000000000000",'Create_Processor','',0,'',"00000000-0000-0000-0000-000000000149" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000015b","ba5eda7a-def5-0000-0000-000000000000",'Check_Parameters','',0,'',"00000000-0000-0000-0000-000000000151" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000165","ba5eda7a-def5-0000-0000-000000000000",'Check_Base_Types','',0,'',"00000000-0000-0000-0000-00000000015b" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000016d","ba5eda7a-def5-0000-0000-000000000000",'Check_Defaults','',0,'',"00000000-0000-0000-0000-000000000165" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000175","ba5eda7a-def5-0000-0000-000000000000",'And_Or_Checks','',0,'',"00000000-0000-0000-0000-00000000016d" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000017d","ba5eda7a-def5-0000-0000-000000000000",'Comment_Checks','',0,'',"00000000-0000-0000-0000-000000000175" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000185","ba5eda7a-def5-0000-0000-000000000000",'Check_Continuation','',0,'',"00000000-0000-0000-0000-00000000017d" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000018d","ba5eda7a-def5-0000-0000-000000000000",'Check_Identifiers','',0,'',"00000000-0000-0000-0000-000000000185" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-000000000198","ba5eda7a-def5-0000-0000-000000000000",'Start_Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-00000000019f","ba5eda7a-def5-0000-0000-000000000000",'Test_Passed','',0,'',"00000000-0000-0000-0000-000000000198" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000001a4","ba5eda7a-def5-0000-0000-000000000000",'Test_Failed','',0,'',"00000000-0000-0000-0000-00000000019f" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000001a9","ba5eda7a-def5-0000-0000-000000000000",'Test_Unsupported','',0,'',"00000000-0000-0000-0000-0000000001a4" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000001ac","ba5eda7a-def5-0000-0000-000000000000",'Test_Text','',0,'',"00000000-0000-0000-0000-0000000001a9" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000001b0","ba5eda7a-def5-0000-0000-000000000000",'Domain_Test_Start','',0,'',"00000000-0000-0000-0000-0000000001ac" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000001b3","ba5eda7a-def5-0000-0000-000000000000",'Domain_Test_Finished','',0,'',"00000000-0000-0000-0000-0000000001b0" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000001b6","ba5eda7a-def5-0000-0000-000000000000",'Specify_Requid','',0,'',"00000000-0000-0000-0000-0000000001b3" );
INSERT INTO C_IO VALUES ( "00000000-0000-0000-0000-0000000001cf","ba5eda7a-def5-0000-0000-000000000000",'What_Env','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000124","00000000-0000-0000-0000-000000000121","ba5eda7a-def5-0000-0000-000000000002",'Test_Start','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000126","00000000-0000-0000-0000-000000000121","ba5eda7a-def5-0000-0000-000000000002",'Final_Test','',1,'',"00000000-0000-0000-0000-000000000124" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000012c","00000000-0000-0000-0000-000000000129","ba5eda7a-def5-0000-0000-000000000002",'Test_Start','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000012e","00000000-0000-0000-0000-000000000129","ba5eda7a-def5-0000-0000-000000000002",'Final_Test','',1,'',"00000000-0000-0000-0000-00000000012c" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000013c","00000000-0000-0000-0000-000000000139","ba5eda7a-def5-0000-0000-000000000002",'Start_Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000013e","00000000-0000-0000-0000-000000000139","ba5eda7a-def5-0000-0000-000000000002",'Finish_Test_Number','',1,'',"00000000-0000-0000-0000-00000000013c" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000144","00000000-0000-0000-0000-000000000141","ba5eda7a-def5-0000-0000-000000000002",'Start_Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000146","00000000-0000-0000-0000-000000000141","ba5eda7a-def5-0000-0000-000000000002",'Finish_Test_Number','',1,'',"00000000-0000-0000-0000-000000000144" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000014c","00000000-0000-0000-0000-000000000149","ba5eda7a-def5-0000-0000-000000000002",'Test_Start','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000014e","00000000-0000-0000-0000-000000000149","ba5eda7a-def5-0000-0000-000000000002",'Final_Test','',1,'',"00000000-0000-0000-0000-00000000014c" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000154","00000000-0000-0000-0000-000000000151","ba5eda7a-def5-0000-0000-000000000002",'Test_Start','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000156","00000000-0000-0000-0000-000000000151","00000000-0000-0000-0000-0000000000fa",'Processor_Id_Local','',0,'',"00000000-0000-0000-0000-000000000154" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000158","00000000-0000-0000-0000-000000000151","ba5eda7a-def5-0000-0000-000000000002",'Final_Test','',1,'',"00000000-0000-0000-0000-000000000156" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000015e","00000000-0000-0000-0000-00000000015b","ba5eda7a-def5-0000-0000-000000000002",'Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000160","00000000-0000-0000-0000-00000000015b","ba5eda7a-def5-0000-0000-000000000002",'The_Subtract_Param','',0,'',"00000000-0000-0000-0000-00000000015e" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000162","00000000-0000-0000-0000-00000000015b","ba5eda7a-def5-0000-0000-000000000002",'Returning_No','',1,'',"00000000-0000-0000-0000-000000000160" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000168","00000000-0000-0000-0000-000000000165","ba5eda7a-def5-0000-0000-000000000002",'Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000016a","00000000-0000-0000-0000-000000000165","ba5eda7a-def5-0000-0000-000000000002",'Returning_No','',1,'',"00000000-0000-0000-0000-000000000168" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000170","00000000-0000-0000-0000-00000000016d","ba5eda7a-def5-0000-0000-000000000002",'Test','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000172","00000000-0000-0000-0000-00000000016d","ba5eda7a-def5-0000-0000-000000000002",'Returning_No','',1,'',"00000000-0000-0000-0000-000000000170" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000178","00000000-0000-0000-0000-000000000175","ba5eda7a-def5-0000-0000-000000000002",'Test_No','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000017a","00000000-0000-0000-0000-000000000175","ba5eda7a-def5-0000-0000-000000000002",'Returning_No','',1,'',"00000000-0000-0000-0000-000000000178" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000180","00000000-0000-0000-0000-00000000017d","ba5eda7a-def5-0000-0000-000000000002",'Test_No','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000182","00000000-0000-0000-0000-00000000017d","ba5eda7a-def5-0000-0000-000000000002",'Returning_No','',1,'',"00000000-0000-0000-0000-000000000180" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000188","00000000-0000-0000-0000-000000000185","ba5eda7a-def5-0000-0000-000000000002",'Test_No','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000018a","00000000-0000-0000-0000-000000000185","ba5eda7a-def5-0000-0000-000000000002",'Returning_No','',1,'',"00000000-0000-0000-0000-000000000188" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000190","00000000-0000-0000-0000-00000000018d","ba5eda7a-def5-0000-0000-000000000002",'Test_No','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-000000000192","00000000-0000-0000-0000-00000000018d","ba5eda7a-def5-0000-0000-000000000002",'Returning_No','',1,'',"00000000-0000-0000-0000-000000000190" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000019a","00000000-0000-0000-0000-000000000198","ba5eda7a-def5-0000-0000-000000000002",'Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000019b","00000000-0000-0000-0000-000000000198","ba5eda7a-def5-0000-0000-000000000004",'Requid','',0,'',"00000000-0000-0000-0000-00000000019a" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000019c","00000000-0000-0000-0000-000000000198","ba5eda7a-def5-0000-0000-000000000004",'Invoking_Domain','',0,'',"00000000-0000-0000-0000-00000000019b" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000019d","00000000-0000-0000-0000-000000000198","ba5eda7a-def5-0000-0000-000000000004",'Invoking_Object','',0,'',"00000000-0000-0000-0000-00000000019c" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-00000000019e","00000000-0000-0000-0000-000000000198","ba5eda7a-def5-0000-0000-000000000004",'Purpose','',0,'',"00000000-0000-0000-0000-00000000019d" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001a1","00000000-0000-0000-0000-00000000019f","ba5eda7a-def5-0000-0000-000000000004",'Test_Object_Domain','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001a2","00000000-0000-0000-0000-00000000019f","ba5eda7a-def5-0000-0000-000000000002",'Test_Number','',0,'',"00000000-0000-0000-0000-0000000001a1" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001a3","00000000-0000-0000-0000-00000000019f","ba5eda7a-def5-0000-0000-000000000002",'Test_Value','',0,'',"00000000-0000-0000-0000-0000000001a2" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001a6","00000000-0000-0000-0000-0000000001a4","ba5eda7a-def5-0000-0000-000000000004",'Failed_Domain_Object','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001a7","00000000-0000-0000-0000-0000000001a4","ba5eda7a-def5-0000-0000-000000000002",'Failed_Test_Number','',0,'',"00000000-0000-0000-0000-0000000001a6" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001a8","00000000-0000-0000-0000-0000000001a4","ba5eda7a-def5-0000-0000-000000000002",'Failed_Test_Value','',0,'',"00000000-0000-0000-0000-0000000001a7" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001ab","00000000-0000-0000-0000-0000000001a9","ba5eda7a-def5-0000-0000-000000000002",'Unsupported_Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001ae","00000000-0000-0000-0000-0000000001ac","ba5eda7a-def5-0000-0000-000000000002",'Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001af","00000000-0000-0000-0000-0000000001ac","ba5eda7a-def5-0000-0000-000000000004",'Free_Text','',0,'',"00000000-0000-0000-0000-0000000001ae" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001b2","00000000-0000-0000-0000-0000000001b0","ba5eda7a-def5-0000-0000-000000000004",'This_Domain_Name','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001b5","00000000-0000-0000-0000-0000000001b3","ba5eda7a-def5-0000-0000-000000000004",'This_Domain_Name','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001b8","00000000-0000-0000-0000-0000000001b6","ba5eda7a-def5-0000-0000-000000000002",'Requid_Test_Number','',0,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001b9","00000000-0000-0000-0000-0000000001b6","ba5eda7a-def5-0000-0000-000000000004",'The_Requid_Itself','',0,'',"00000000-0000-0000-0000-0000000001b8" );
INSERT INTO C_PP VALUES ( "00000000-0000-0000-0000-0000000001d1","00000000-0000-0000-0000-0000000001cf","ba5eda7a-def5-0000-0000-000000000004",'Env_Text','',1,'',"00000000-0000-0000-0000-000000000000" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-00000000011f","00000000-0000-0000-0000-00000000011d","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000120" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-000000000196","00000000-0000-0000-0000-000000000194","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000197" );
INSERT INTO C_IR VALUES ( "00000000-0000-0000-0000-0000000001cd","00000000-0000-0000-0000-0000000001cb","00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-0000000001ce" );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-000000000120","00000000-0000-0000-0000-000000000023",'ASL_Mapping',0,0 );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-000000000197","00000000-0000-0000-0000-000000000023",'Report_Result',0,0 );
INSERT INTO C_PO VALUES ( "00000000-0000-0000-0000-0000000001ce","00000000-0000-0000-0000-000000000023",'Where_Are_We',0,0 );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000001ba","00000000-0000-0000-0000-000000000198","00000000-0000-0000-0000-000000000196" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000001bc","00000000-0000-0000-0000-00000000019f","00000000-0000-0000-0000-000000000196" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000001be","00000000-0000-0000-0000-0000000001a4","00000000-0000-0000-0000-000000000196" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000001c0","00000000-0000-0000-0000-0000000001a9","00000000-0000-0000-0000-000000000196" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000001c2","00000000-0000-0000-0000-0000000001ac","00000000-0000-0000-0000-000000000196" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000001c4","00000000-0000-0000-0000-0000000001b0","00000000-0000-0000-0000-000000000196" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000001c6","00000000-0000-0000-0000-0000000001b3","00000000-0000-0000-0000-000000000196" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000001c8","00000000-0000-0000-0000-0000000001b6","00000000-0000-0000-0000-000000000196" );
INSERT INTO SPR_REP VALUES ( "00000000-0000-0000-0000-0000000001d2","00000000-0000-0000-0000-0000000001cf","00000000-0000-0000-0000-0000000001cd" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-00000000073c","00000000-0000-0000-0000-000000000121","00000000-0000-0000-0000-00000000011f" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-00000000073e","00000000-0000-0000-0000-000000000129","00000000-0000-0000-0000-00000000011f" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000740","00000000-0000-0000-0000-000000000131","00000000-0000-0000-0000-00000000011f" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000742","00000000-0000-0000-0000-000000000135","00000000-0000-0000-0000-00000000011f" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000744","00000000-0000-0000-0000-000000000139","00000000-0000-0000-0000-00000000011f" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000746","00000000-0000-0000-0000-000000000141","00000000-0000-0000-0000-00000000011f" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000748","00000000-0000-0000-0000-000000000149","00000000-0000-0000-0000-00000000011f" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-00000000074a","00000000-0000-0000-0000-000000000151","00000000-0000-0000-0000-00000000011f" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-00000000074c","00000000-0000-0000-0000-00000000015b","00000000-0000-0000-0000-00000000011f" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-00000000074e","00000000-0000-0000-0000-000000000165","00000000-0000-0000-0000-00000000011f" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000750","00000000-0000-0000-0000-00000000016d","00000000-0000-0000-0000-00000000011f" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000752","00000000-0000-0000-0000-000000000175","00000000-0000-0000-0000-00000000011f" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000754","00000000-0000-0000-0000-00000000017d","00000000-0000-0000-0000-00000000011f" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000756","00000000-0000-0000-0000-000000000185","00000000-0000-0000-0000-00000000011f" );
INSERT INTO SPR_PEP VALUES ( "00000000-0000-0000-0000-000000000758","00000000-0000-0000-0000-00000000018d","00000000-0000-0000-0000-00000000011f" );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000001ba",'','','',3,2 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000001bc",'','','',3,2 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000001be",'','','',3,2 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000001c0",'','','',3,2 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000001c2",'','','',3,2 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000001c4",'','','',3,2 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000001c6",'','','',3,2 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000001c8",'','','',3,2 );
INSERT INTO SPR_RO VALUES ( "00000000-0000-0000-0000-0000000001d2",'','','',3,2 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-00000000073c",'','','',3,6 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-00000000073e",'','','',3,6 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000740",'','','',3,6 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000742",'','','',3,6 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000744",'','','',3,6 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000746",'','','',3,6 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000748",'','','',3,6 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-00000000074a",'','','',3,6 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-00000000074c",'','','',3,6 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-00000000074e",'','','',3,6 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000750",'','','',3,6 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000752",'','','',3,6 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000754",'','','',3,6 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000756",'','','',3,6 );
INSERT INTO SPR_PO VALUES ( "00000000-0000-0000-0000-000000000758",'','','',3,6 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-000000000249",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-00000000027b",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-0000000002b9",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-00000000030d",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-00000000034c",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-00000000037e",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-0000000003ab",'',0 );
INSERT INTO SM_SM VALUES ( "00000000-0000-0000-0000-0000000005ca",'',0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-0000000005d2","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'Idle_State',1,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-0000000005db","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'How_Big',2,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-0000000005e4","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'Complete',3,0 );
INSERT INTO SM_STATE VALUES ( "00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'Next_Stage',4,0 );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000251","00000000-0000-0000-0000-000000000249","00000000-0000-0000-0000-000000000000",1,'Start',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000257","00000000-0000-0000-0000-000000000249","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000025d","00000000-0000-0000-0000-000000000249","00000000-0000-0000-0000-000000000000",3,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000283","00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-000000000000",1,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000289","00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-000000000000",2,'Finsihed',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000028f","00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-000000000000",3,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000295","00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-000000000000",4,'StartB',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-000000000000",5,'StartC',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000002c1","00000000-0000-0000-0000-0000000002b9","00000000-0000-0000-0000-000000000000",1,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000002c7","00000000-0000-0000-0000-0000000002b9","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000002cd","00000000-0000-0000-0000-0000000002b9","00000000-0000-0000-0000-000000000000",3,'StartB',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000002d3","00000000-0000-0000-0000-0000000002b9","00000000-0000-0000-0000-000000000000",4,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000315","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000",1,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000031b","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000",2,'StartB',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000321","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000",3,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000327","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000",4,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000032d","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000",5,'StartC',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000333","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000",6,'StartD',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-00000000034c","00000000-0000-0000-0000-000000000000",1,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000035a","00000000-0000-0000-0000-00000000034c","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000360","00000000-0000-0000-0000-00000000034c","00000000-0000-0000-0000-000000000000",3,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000366","00000000-0000-0000-0000-00000000034c","00000000-0000-0000-0000-000000000000",4,'StartB',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000386","00000000-0000-0000-0000-00000000037e","00000000-0000-0000-0000-000000000000",1,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000038c","00000000-0000-0000-0000-00000000037e","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000392","00000000-0000-0000-0000-00000000037e","00000000-0000-0000-0000-000000000000",3,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000003b3","00000000-0000-0000-0000-0000000003ab","00000000-0000-0000-0000-000000000000",1,'Fault',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000003b9","00000000-0000-0000-0000-0000000003ab","00000000-0000-0000-0000-000000000000",2,'Finished',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000003bf","00000000-0000-0000-0000-0000000003ab","00000000-0000-0000-0000-000000000000",3,'StartA',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-0000000005f6","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",1,'Have_A_Biggie',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-00000000061a","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",2,'To_Complete',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000638","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",3,'This_Wont_Happen',0,'','','' );
INSERT INTO SM_EVT VALUES ( "00000000-0000-0000-0000-000000000656","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",4,'To_Next_Stage',0,'','','' );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005d2","00000000-0000-0000-0000-0000000005f6","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005db","00000000-0000-0000-0000-0000000005f6","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005e4","00000000-0000-0000-0000-0000000005f6","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-0000000005f6","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005d2","00000000-0000-0000-0000-00000000061a","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005db","00000000-0000-0000-0000-00000000061a","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005e4","00000000-0000-0000-0000-00000000061a","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-00000000061a","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005d2","00000000-0000-0000-0000-000000000638","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005db","00000000-0000-0000-0000-000000000638","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005e4","00000000-0000-0000-0000-000000000638","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-000000000638","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005d2","00000000-0000-0000-0000-000000000656","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005db","00000000-0000-0000-0000-000000000656","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005e4","00000000-0000-0000-0000-000000000656","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEME VALUES ( "00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-000000000656","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-000000000678","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-0000000005d2","00000000-0000-0000-0000-0000000005f6","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-00000000068f","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-0000000005db","00000000-0000-0000-0000-000000000638","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-00000000069d","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-0000000005db","00000000-0000-0000-0000-000000000656","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_NSTXN VALUES ( "00000000-0000-0000-0000-0000000006ae","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-00000000061a","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EIGN VALUES ( "00000000-0000-0000-0000-0000000005d2","00000000-0000-0000-0000-00000000061a","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_EIGN VALUES ( "00000000-0000-0000-0000-0000000005d2","00000000-0000-0000-0000-000000000656","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_EIGN VALUES ( "00000000-0000-0000-0000-0000000005db","00000000-0000-0000-0000-0000000005f6","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_EIGN VALUES ( "00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-0000000005f6","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_EIGN VALUES ( "00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-000000000656","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000005e4","00000000-0000-0000-0000-0000000005f6","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000005db","00000000-0000-0000-0000-00000000061a","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000005e4","00000000-0000-0000-0000-00000000061a","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000005d2","00000000-0000-0000-0000-000000000638","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000005e4","00000000-0000-0000-0000-000000000638","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-000000000638","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_CH VALUES ( "00000000-0000-0000-0000-0000000005e4","00000000-0000-0000-0000-000000000656","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000",'' );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-000000000678","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-0000000005db","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-00000000068f","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-0000000005d2","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-00000000069d","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-0000000005ed","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TXN VALUES ( "00000000-0000-0000-0000-0000000006ae","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-0000000005e4","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-000000000249" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-00000000027b" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-0000000002b9" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-00000000030d" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-00000000034c" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-00000000037e" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-0000000003ab" );
INSERT INTO SM_MOORE VALUES ( "00000000-0000-0000-0000-0000000005ca" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-0000000005d4","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-0000000005d2" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-0000000005dd","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-0000000005db" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-0000000005e6","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-0000000005e4" );
INSERT INTO SM_MOAH VALUES ( "00000000-0000-0000-0000-0000000005ef","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-0000000005ed" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000005d4","00000000-0000-0000-0000-0000000005ca" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000005dd","00000000-0000-0000-0000-0000000005ca" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000005e6","00000000-0000-0000-0000-0000000005ca" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000005ef","00000000-0000-0000-0000-0000000005ca" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-00000000067c","00000000-0000-0000-0000-0000000005ca" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-000000000693","00000000-0000-0000-0000-0000000005ca" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000006a1","00000000-0000-0000-0000-0000000005ca" );
INSERT INTO SM_AH VALUES ( "00000000-0000-0000-0000-0000000006b2","00000000-0000-0000-0000-0000000005ca" );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000005d4","00000000-0000-0000-0000-0000000005ca",3,'# If we gete here, there is serious grief.

[] = RPT5:Test_Text[0,"Major Error"]

#$ADA_INLINE

#   with Application_Types;

#   raise Application_Types.Stop_Application;

#$END_ADAINLINE','',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000005dd","00000000-0000-0000-0000-0000000005ca",3,'[] = RPT1:Start_Test[Current_Test_Number, "Null Requid", "ASL Mapping", "Big Object", "generate to big object"]

Local_Test_Number = Current_Test_Number

# Compare the attributes of this to the control data

if this.One = Expected_Result_Number and \
   this.Forty = Expected_Result_Number and \
   this.Eightyfour = Expected_Result_Number then

   [] = RPT2:Test_Passed["this and control data match", Local_Test_Number, 0]

else

   [] = RPT3:Test_Failed["this and control data do not match", Local_Test_Number, 0]

endif

Local_Test_Number = Local_Test_Number + 1

# Update the test number so that the result of the next generation
# has it''s own test number, and pass through the instance handle of the big object
# that has so far been woefully ignored.

generate objBIG4:To_Next_Stage (Big_IH, Local_Test_Number) to this
','',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000005e6","00000000-0000-0000-0000-0000000005ca",3,'[] = RPT5:Test_Text[this.One, "Generating into termination state now"]


[] = ASL_Mapping4::Delete_Report_Data[]

delete this
','',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000005ef","00000000-0000-0000-0000-0000000005ca",3,'
# ###########################################################################

[] = RPT1:Start_Test[Next_Test_Number, "Null Requid", "ASL Mapping", "Big Object", "Compare control IH and this"]

# Compare the attributes of this to the control IH

if this.One !=  Big_IH.One and \
   this.Forty != Big_IH.Forty and \
   this.Eightyfour != Big_IH.Eightyfour then

   [] = RPT2:Test_Passed["this & control IH do not match", Next_Test_Number, 0]

else

   [] = RPT3:Test_Failed["this & control IH match", Next_Test_Number, this.Eightyfour]

endif

generate objBIG2:To_Complete() to this','',2 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-00000000067c","00000000-0000-0000-0000-0000000005ca",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-000000000693","00000000-0000-0000-0000-0000000005ca",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000006a1","00000000-0000-0000-0000-0000000005ca",3,'','',6 );
INSERT INTO SM_ACT VALUES ( "00000000-0000-0000-0000-0000000006b2","00000000-0000-0000-0000-0000000005ca",3,'','',6 );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000614","00000000-0000-0000-0000-0000000005ca",'Big_IH','',"00000000-0000-0000-0000-00000000009b",'',"00000000-0000-0000-0000-0000000005f6","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000616","00000000-0000-0000-0000-0000000005ca",'Current_Test_Number','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000005f6","00000000-0000-0000-0000-000000000614" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000618","00000000-0000-0000-0000-0000000005ca",'Expected_Result_Number','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-0000000005f6","00000000-0000-0000-0000-000000000616" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000674","00000000-0000-0000-0000-0000000005ca",'Big_IH','',"00000000-0000-0000-0000-00000000009b",'',"00000000-0000-0000-0000-000000000656","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_EVTDI VALUES ( "00000000-0000-0000-0000-000000000676","00000000-0000-0000-0000-0000000005ca",'Next_Test_Number','',"ba5eda7a-def5-0000-0000-000000000002",'',"00000000-0000-0000-0000-000000000656","00000000-0000-0000-0000-000000000674" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-000000000249","00000000-0000-0000-0000-00000000003f" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-00000000004a" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-0000000002b9","00000000-0000-0000-0000-000000000055" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000060" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-00000000034c","00000000-0000-0000-0000-00000000006b" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-00000000037e","00000000-0000-0000-0000-000000000076" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-0000000003ab","00000000-0000-0000-0000-000000000081" );
INSERT INTO SM_ISM VALUES ( "00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000097" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000251","00000000-0000-0000-0000-000000000249","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000257","00000000-0000-0000-0000-000000000249","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000025d","00000000-0000-0000-0000-000000000249","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000283","00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000289","00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000028f","00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000295","00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000002c1","00000000-0000-0000-0000-0000000002b9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000002c7","00000000-0000-0000-0000-0000000002b9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000002cd","00000000-0000-0000-0000-0000000002b9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000002d3","00000000-0000-0000-0000-0000000002b9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000315","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000031b","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000321","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000327","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000032d","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000333","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-00000000034c","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000035a","00000000-0000-0000-0000-00000000034c","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000360","00000000-0000-0000-0000-00000000034c","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000366","00000000-0000-0000-0000-00000000034c","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000386","00000000-0000-0000-0000-00000000037e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000038c","00000000-0000-0000-0000-00000000037e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000392","00000000-0000-0000-0000-00000000037e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000003b3","00000000-0000-0000-0000-0000000003ab","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000003b9","00000000-0000-0000-0000-0000000003ab","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000003bf","00000000-0000-0000-0000-0000000003ab","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-0000000005f6","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-00000000061a","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000638","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_SEVT VALUES ( "00000000-0000-0000-0000-000000000656","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000251","00000000-0000-0000-0000-000000000249","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000257","00000000-0000-0000-0000-000000000249","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000025d","00000000-0000-0000-0000-000000000249","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000283","00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000289","00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000028f","00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000295","00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000029b","00000000-0000-0000-0000-00000000027b","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000002c1","00000000-0000-0000-0000-0000000002b9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000002c7","00000000-0000-0000-0000-0000000002b9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000002cd","00000000-0000-0000-0000-0000000002b9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000002d3","00000000-0000-0000-0000-0000000002b9","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000315","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000031b","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000321","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000327","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000032d","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000333","00000000-0000-0000-0000-00000000030d","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000354","00000000-0000-0000-0000-00000000034c","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000035a","00000000-0000-0000-0000-00000000034c","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000360","00000000-0000-0000-0000-00000000034c","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000366","00000000-0000-0000-0000-00000000034c","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000386","00000000-0000-0000-0000-00000000037e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000038c","00000000-0000-0000-0000-00000000037e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000392","00000000-0000-0000-0000-00000000037e","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000003b3","00000000-0000-0000-0000-0000000003ab","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000003b9","00000000-0000-0000-0000-0000000003ab","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000003bf","00000000-0000-0000-0000-0000000003ab","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-0000000005f6","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-00000000061a","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000638","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_LEVT VALUES ( "00000000-0000-0000-0000-000000000656","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000000" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-00000000067c","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-000000000678" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-000000000693","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-00000000068f" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-0000000006a1","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-00000000069d" );
INSERT INTO SM_TAH VALUES ( "00000000-0000-0000-0000-0000000006b2","00000000-0000-0000-0000-0000000005ca","00000000-0000-0000-0000-0000000006ae" );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000004",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000006",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000009",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000000c",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000000f",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000012",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000015",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000018",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000001b",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000001e",1,"00000000-0000-0000-0000-000000000004","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000021",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000023",1,"00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000000",2 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000025",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000027",1,"00000000-0000-0000-0000-000000000021","00000000-0000-0000-0000-000000000000",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000029",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000002d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000030",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000034",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000038",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000003b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000003f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000043",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000046",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000004a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000004e",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000051",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000055",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000059",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000005c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000060",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000064",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000067",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000006b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000006f",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000072",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000076",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000007a",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000007d",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000081",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000085",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000088",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000008c",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000090",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000093",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000097",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000009b",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000009e",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000a2",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000a6",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000a9",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000ad",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b1",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b4",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000b8",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000bc",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000bf",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000c3",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000c7",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000ca",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000ce",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000d2",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000d5",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000d9",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000dd",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000e0",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000e4",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000e8",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000eb",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000ef",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",4 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000f3",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000f6",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000000fa",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000100",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000102",1,"00000000-0000-0000-0000-000000000100","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000010b",1,"00000000-0000-0000-0000-000000000100","00000000-0000-0000-0000-000000000000",3 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000119",1,"00000000-0000-0000-0000-000000000000","00000000-0000-0000-0000-000000000023",7 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000011b",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000011d",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000128",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000130",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000134",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000138",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000140",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000148",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000150",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000015a",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000164",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000016c",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000174",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000017c",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000184",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-00000000018c",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000194",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001cb",1,"00000000-0000-0000-0000-000000000027","00000000-0000-0000-0000-000000000000",6 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001d5",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001d7",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001d9",1,"00000000-0000-0000-0000-000000000119","00000000-0000-0000-0000-000000000000",1 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-0000000001db",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO PE_PE VALUES ( "00000000-0000-0000-0000-000000000200",1,"00000000-0000-0000-0000-000000000025","00000000-0000-0000-0000-000000000000",9 );
INSERT INTO model VALUES ( 'maslin' );
INSERT INTO option VALUES ( 'maslin','actiondialect','WASL' );
INSERT INTO option VALUES ( 'maslin','projectroot','/tmp/convertdir/ASL_Mapping/' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000006","00000000-0000-0000-0000-000000000000",'MASLtype','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000009","00000000-0000-0000-0000-000000000000",'MASLunique','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000000c","00000000-0000-0000-0000-000000000000",'device','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000000f","00000000-0000-0000-0000-000000000000",'duration','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000012","00000000-0000-0000-0000-000000000000",'wstring','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000015","00000000-0000-0000-0000-000000000000",'long_integer','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000018","00000000-0000-0000-0000-000000000000",'byte','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000001b","00000000-0000-0000-0000-000000000000",'wcharacter','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000001e","00000000-0000-0000-0000-000000000000",'character','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000002d","00000000-0000-0000-0000-000000000000",'inst_ref<Object_IF>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000030","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_IF>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000038","00000000-0000-0000-0000-000000000000",'inst_ref<Object_FOR>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000003b","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_FOR>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000043","00000000-0000-0000-0000-000000000000",'inst_ref<Object_LOOP>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000046","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_LOOP>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000004e","00000000-0000-0000-0000-000000000000",'inst_ref<Object_NESTED>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000051","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_NESTED>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000059","00000000-0000-0000-0000-000000000000",'inst_ref<Object_SWITCH>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000005c","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_SWITCH>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000064","00000000-0000-0000-0000-000000000000",'inst_ref<Object_LOGIC>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000067","00000000-0000-0000-0000-000000000000",'inst_ref_set<Object_LOGIC>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000006f","00000000-0000-0000-0000-000000000000",'inst_ref<Nested_IF>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000072","00000000-0000-0000-0000-000000000000",'inst_ref_set<Nested_IF>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000007a","00000000-0000-0000-0000-000000000000",'inst_ref<Nested_FOR>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000007d","00000000-0000-0000-0000-000000000000",'inst_ref_set<Nested_FOR>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000085","00000000-0000-0000-0000-000000000000",'inst_ref<Nested_LOOP>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000088","00000000-0000-0000-0000-000000000000",'inst_ref_set<Nested_LOOP>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000090","00000000-0000-0000-0000-000000000000",'inst_ref<Report_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000093","00000000-0000-0000-0000-000000000000",'inst_ref_set<Report_Data>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000009b","00000000-0000-0000-0000-000000000000",'inst_ref<BIG_Object>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000009e","00000000-0000-0000-0000-000000000000",'inst_ref_set<BIG_Object>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000a6","00000000-0000-0000-0000-000000000000",'inst_ref<Processor>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000a9","00000000-0000-0000-0000-000000000000",'inst_ref_set<Processor>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000b1","00000000-0000-0000-0000-000000000000",'inst_ref<Default_Vals>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000b4","00000000-0000-0000-0000-000000000000",'inst_ref_set<Default_Vals>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000bc","00000000-0000-0000-0000-000000000000",'inst_ref<ObjectA>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000bf","00000000-0000-0000-0000-000000000000",'inst_ref_set<ObjectA>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000c7","00000000-0000-0000-0000-000000000000",'inst_ref<ObjectB>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000ca","00000000-0000-0000-0000-000000000000",'inst_ref_set<ObjectB>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000d2","00000000-0000-0000-0000-000000000000",'inst_ref<Left>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000d5","00000000-0000-0000-0000-000000000000",'inst_ref_set<Left>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000dd","00000000-0000-0000-0000-000000000000",'inst_ref<Right>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000e0","00000000-0000-0000-0000-000000000000",'inst_ref_set<Right>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000e8","00000000-0000-0000-0000-000000000000",'inst_ref<LeftRight>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000eb","00000000-0000-0000-0000-000000000000",'inst_ref_set<LeftRight>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000f3","00000000-0000-0000-0000-000000000000",'inst_ref<Another_Right>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000f6","00000000-0000-0000-0000-000000000000",'inst_ref_set<Another_Right>','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-0000000000fa","00000000-0000-0000-0000-000000000000",'Processor_Id_Type','','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-000000000102","00000000-0000-0000-0000-000000000000",'Enum',' Enumerated attribute containing person''s names.
','' );
INSERT INTO S_DT VALUES ( "00000000-0000-0000-0000-00000000010b","00000000-0000-0000-0000-000000000000",'Simple_Structure_Type','','' );
